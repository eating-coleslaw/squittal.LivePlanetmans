@page "/playerstats"
@*@page "/playerstats/{killboardPlayerId}"*@
@using squittal.LivePlanetmans.Shared.Models
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (string.IsNullOrWhiteSpace(playerId))
{
    <div style="padding: 10px;">
        <h2>Player Details</h2>
        <p class="textu-muted"><em>Select a player</em></p>
    </div>
}
else
{
    //<p>@*Player ID: @killboardPlayerId*@</p>
    @if (stats != null && player != null)
    {
        <div id="details-header" style="display: grid; grid-template-columns: 1fr 80px; grid-template-rows: 1fr 1rem; border-top: 2px solid @GetFactionColorFromId(player.FactionId); border-top-left-radius: 0.2rem; border-top-right-radius: 0.2rem; padding: 5px 10px;">
            <div class="h2" style="margin-bottom: 0px; word-wrap: break-word;">
                <a href="@GetUrlFromCharacterName(player.Name)" target="_blank" style="color:@GetFactionColorFromId(player.FactionId);">
                    @player.Name
                    <span class="h6 oi oi-external-link" style="opacity: 0.5;"></span>
                </a>
            </div>

            <div style="text-align: right;">
                <span class="h6">@stats.BattleRank</span>
                @if (stats.PrestigeLevel != 0)
                {
                    <span class="oi oi-star small h6" style="color: #F8BA0F; vertical-align: middle; font-size: 0.8rem; margin-bottom: 0.5rem;" aria-hidden="true"></span>
                }
                <div class="text-muted" style="font-size: 0.8rem; font-weight: 300; margin-top: -0.3rem;">Battle Rank</div>
            </div>

            <div style="color: @GetFactionColorFromId(stats.FactionId); grid-row: 2; font-size: 0.8rem;">
                @if (!string.IsNullOrWhiteSpace(stats.TitleName))
                {
                    <span>@stats.TitleName of the </span>
                }
                <span>@stats.FactionName on @stats.WorldName</span>
            </div>

        </div>

        <div id="details-body" style="padding: 0px 10px;">
            <div id="details-stats" style="display: grid; grid-template-columns: 1fr 1fr 1fr 3fr; grid-template-areas: 'left middle blank right'; grid-gap: 2rem; line-height: 1rem; padding: 0.5rem; margin: 0.3125rem 0; border-radius: 0.2rem; background-color: @(GetFactionLightColorFromId(stats.FactionId))30; border-top: 2px solid @GetFactionLightColorFromId(stats.FactionId);">
                <dl class="row" style="grid-area: left; margin: 0px;">
                    <dt class="col-sm-3 text-muted" style="padding-left: 0px;">KDR</dt>
                    <dd class="col-sm-9" style="margin-bottom: 0px; padding-left: 0.3125rem; padding-right: 0px; text-align: right;">@stats.KillDeathRatio</dd>

                    <dt class="col-sm-3 text-muted" style="padding-left: 0px;">KPM</dt>
                    <dd class="col-sm-9" style="margin-bottom: 0px; padding-left: 0.3125rem; padding-right: 0px; text-align: right;">@stats.KillsPerMinute</dd>

                    <dt class="col-sm-3 text-muted" style="padding-left: 0px;">HSR</dt>
                    <dd class="col-sm-9" style="margin-bottom: 0px; padding-left: 0.3125rem; padding-right: 0px; text-align: right;">@(stats.HeadshotRatio)<span style="font-size: 0.75rem;">%</span></dd>
                </dl>

                <dl class="row" style="grid-area: middle; margin: 0px;">
                    <dt class="col-sm-9 text-muted" style="padding-left: 0px;">Kills</dt>
                    <dd class="col-sm-3" style="margin-bottom: 0px; padding-left: 0.3125rem; padding-right: 0px; text-align: right;">@stats.Kills</dd>

                    <dt class="col-sm-9 text-muted" style="padding-left: 0px;">Deaths</dt>
                    <dd class="col-sm-3" style="margin-bottom: 0px; padding-left: 0.3125rem; padding-right: 0px; text-align: right;">@stats.Deaths</dd>

                    <dt class="col-sm-9 text-muted" style="padding-left: 0px;">Team Kills</dt>
                    <dd class="col-sm-3" style="margin-bottom: 0px; padding-left: 0.3125rem; padding-right: 0px; text-align: right;">@stats.TeamKills</dd>

                    <dt class="col-sm-9 text-muted" style="padding-left: 0px;">Suicides</dt>
                    <dd class="col-sm-3" style="margin-bottom: 0px; padding-left: 0.3125rem; padding-right: 0px; text-align: right;">@stats.Suicides</dd>
                </dl>

                <dl class="row" style="grid-area: right; margin: 0px;">
                    @if (!string.IsNullOrWhiteSpace(stats.OutfitAlias))
                    {
                        <dt class="col-sm-2 text-muted" style="padding-left: 0px; padding-right: 10px;">Outfit</dt>
                        <dd class="col-sm-10" style="margin-bottom: 0px; padding-left: 0.3125rem; text-align: left;">[@(stats.OutfitAlias)] @stats.OutfitName</dd>

                        <dt class="col-sm-2 text-muted" style="padding-left: 0px; padding-right: 10px;">Rank</dt>
                        <dd class="col-sm-10" style="margin-bottom: 0px; padding-left: 0.3125rem; text-align: left;">@stats.OutfitRankName</dd>
                    }
                </dl>
            </div>

            <h5>Kills This Hour</h5>
            @if (kills == null || isLoadingKillboard == true)
            {
                <p class="text-muted"><em>Loading killboard...</em></p>
            }
            else
            {
                <div style="max-height: 400px; overflow: auto; border-top: 1px solid #27273a80; border-bottom: 1px solid #27273a80; border-top-left-radius: 0.2rem; border-bottom-right-radius: 0.2rem;">
                    <table class="table-responsive-sm table" style="font-size: 0.85rem !important;">
                        <tbody>
                            @foreach (var kill in kills)
                            {
                                <tr style="background-color:@GetRowBgColor(kill.VictimId, kill.VictimFactionId); color:@GetKillboardTextColor(kill.AttackerId, kill.AttackerFactionId, kill.VictimFactionId) !important; border-top: @GetKillboardBorderStyle(kill.VictimId);">
                                    @*1px solid #27273a50; border-bottom: 1px solid #27273a50;">*@
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; min-width: 105px; max-width: 110px; width: 7rem; border: inherit;">
                                        @((kill.KillTimestamp - TimeSpan.FromHours(5)).ToLongTimeString())
                                    </td>

                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 5px; max-width: 55px; width: 1rem; border: inherit;">
                                        @if (kill.VictimId == playerId)
                                        {
                                            @((string.IsNullOrWhiteSpace(kill.AttackerOutfitAlias)) ? "" : $"[{kill.AttackerOutfitAlias}]")
                                        }
                                        else
                                        {
                                            @((string.IsNullOrWhiteSpace(kill.VictimOutfitAlias)) ? "" : $"[{kill.VictimOutfitAlias}]")
                                        }
                                    </td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; border: inherit;">
                                        @if (kill.VictimId == playerId)
                                        {
                                            @*<a href="/activity?world=@(stats.WorldId)&playerId=@(kill.AttackerId)" style="text-decoration: none; font-size: 1rem; color: red;">asdg*@
                                            <button class="btn btn-link" style="font-size: 0.8rem; padding: 0rem !important; color:@GetKillboardTextColor(kill.AttackerId, kill.AttackerFactionId, kill.VictimFactionId) !important;" @onclick="@(() => OnSelectKillboardPlayer(kill.AttackerId, player.WorldId))">
                                                @*@kill.AttackerName*@
                                                <div style="display: inline-block; max-width: 250px; overflow: hidden; text-overflow: ellipsis; vertical-align: bottom;">@kill.AttackerName</div>
                                                <div style="display: inline-block;">
                                                    <sup>
                                                        @(kill.AttackerBattleRank)
                                                        @if (stats.PrestigeLevel != 0)
                                                        {
                                                            <span class="oi oi-star small" style="top: -1px; margin-left: -0.1rem;" aria-hidden="true"></span>
                                                        }
                                                    </sup>
                                                </div>
                                                @*</a>*@
                                            </button>

                                            @*<div style="display: inline-block;"><sup> @(kill.AttackerBattleRank) @((kill.AttackerPrestigeLevel == 0) ? "" : $"~{kill.AttackerPrestigeLevel}")</sup></div>*@
                                        }
                                        else
                                        {
                                            @*@kill.VictimName*@
                                            @*<a href="/activity?world=@(stats.WorldId)&playerId=@(kill.VictimId)" style="text-decoration: none;">asdg*@
                                            <button class="btn btn-link" style="font-size: 0.8rem; padding: 0rem !important; color:@GetKillboardTextColor(kill.AttackerId, kill.AttackerFactionId, kill.VictimFactionId) !important;" @onclick="@(() => OnSelectKillboardPlayer(kill.VictimId, player.WorldId))">
                                                <div style="display: inline-block; max-width: 250px; overflow: hidden; text-overflow: ellipsis; vertical-align: bottom;">@kill.VictimName</div>
                                                <div style="display: inline-block;">
                                                    <sup>
                                                        @(kill.VictimBattleRank)
                                                        @if (kill.VictimPrestigeLevel != 0)
                                                        {
                                                            <span class="oi oi-star small" style="top: -1px; margin-left: -0.1rem;" aria-hidden="true"></span>
                                                        }
                                                    </sup>
                                                </div>
                                                @*</a>*@
                                            </button>
                                            @*<div style="display: inline-block;"><sup> @(kill.VictimBattleRank) @((kill.VictimPrestigeLevel == 0) ? "" : $"~{kill.VictimPrestigeLevel}")</sup></div>*@
                                        }
                                    </td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-left: 0.5rem; max-width: 30px;  width: 1rem; border: inherit;">
                                        @if (kill.IsHeadshot == true)
                                        {
                                            <span class="oi small oi-target" aria-hidden="true" style="padding-left: 0.3125rem; padding-right: 0.3125rem;"></span>
                                        }
                                    </td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; border: inherit;">
                                        @kill.AttackerWeaponName
                                    </td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; border: inherit;">
                                        @kill.ZoneName
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <div id="details-footer" style="display: contents;">
            @*position: absolute; bottom: 0.3125rem; left: 0.3125rem;">*@
            <div style="margin: 0.3125rem 0rem;">
                <a href="@GetUrlFromCharacterId(player.Id)" class="text-muted h6" style="font-size: 0.8rem; padding-left: 0.8rem; margin-top: 0.1rem;" target="_blank">
                    @player.Id
                    <span class="h6 oi oi-external-link" style="font-size: 60%; opacity: 0.5;"></span>
                </a>
            </div>
        </div>
    }
}

<div class="row">
    <div class="col-sm-12">
        <p>
            playerId: @playerId
        </p>
        <p>
            killboardPlayerId: @killboardPlayerId
        </p>
        <p>
            renderedId: @renderedPlayerId
        </p>
        <p>
            OnInits: @initAsyncCount
        </p>
        <p>
            Param Sets: @paramSetAsyncCount
        </p>
        <p>
            Navs: @navigations
        </p>
        <p>
            Renders: @renderCount
        </p>
    </div>
</div>

@code {
    Character player;
    PlayerHourlyStatsData stats;

    PlayerKillboardItem[] kills;

    int fetchTries = 0;
    bool isLoadingKillboard = false;

    [Parameter]
    public string playerId { get; set; }

    string renderedPlayerId;

    //[Parameter]
    //public int worldId { get; set; }


    [Parameter]
    public EventCallback<string> OnKillboardPlayerSelected { get; set; }

    private string killboardPlayerId;
    public string KillboardPlayerId
    {
        get => killboardPlayerId;
        set
        {
            killboardPlayerId = value;
            // Invoke the delegate passing it the changed value
            if (killboardPlayerId != renderedPlayerId)
            {
                OnKillboardPlayerSelected.InvokeAsync(value);
            }
        }
    }

    // DEBUG
    int initAsyncCount = 0;
    int paramSetAsyncCount = 0;
    int navigations = 0;
    int renderCount = 0;

    protected override async Task OnInitializedAsync()
    {
        initAsyncCount += 1;
        StateHasChanged();

        //var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        //if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("worldId", out var qWorldId))
        //{
        //    worldId = Int32.Parse(qWorldId.First());
        //}

        //if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("playerId", out var qPlayerId))
        //{
        //    playerId = qPlayerId.First();
        //}

        await OnPlayerIdChange();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        renderCount += 1;
        //StateHasChanged();

        //var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        //if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("worldId", out var qWorldId))
        //{
        //    worldId = Int32.Parse(qWorldId.First());
        //}

        //if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("playerId", out var qPlayerId))
        //{
        //    playerId = qPlayerId.First();
        //}

        //await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        //StateHasChanged();

        if ((playerId != killboardPlayerId || playerId != renderedPlayerId) && !string.IsNullOrEmpty(playerId))
        {
            paramSetAsyncCount += 1;
            renderedPlayerId = playerId;
            killboardPlayerId = playerId;
            await OnPlayerIdChange();
        }
    }

    private void OnSelectKillboardPlayer(string newPlayerId, int newWorldId)
    {
        //playerId = newPlayerId;
        //worldId = newWorldId;

        //KillboardPlayerId = playerId;
        KillboardPlayerId = newPlayerId;

        //await OnPlayerIdChange();

        //NavigationManager.NavigateTo($"/activity?worldId={worldId}&playerId={playerId}");
        //navigations += 1;
        //StateHasChanged();
        //await OnPlayerIdChange();

    }

    private async Task OnPlayerIdChange()
    {
        fetchTries += 1;
        if (!string.IsNullOrWhiteSpace(playerId) && isLoadingKillboard != true)
        {
            isLoadingKillboard = true;
            try
            {
                Task<Character> playerTask = Http.GetJsonAsync<Character>($"api/PlayerDetails/{playerId}");
                Task<PlayerHourlyStatsData> statsTask = Http.GetJsonAsync<PlayerHourlyStatsData>($"api/PlayerDetails/stats/{playerId}");
                Task<PlayerKillboardItem[]> killsTask = Http.GetJsonAsync<PlayerKillboardItem[]>($"api/PlayerDetails/kills/{playerId}");
                player = await playerTask;
                stats = await statsTask;
                StateHasChanged();
                kills = await killsTask;
                StateHasChanged();

                //KillboardPlayerId = playerId;
            }
            catch (Exception)
            {
                //Ignore
            }
            isLoadingKillboard = false;
        }
    }

    string GetUrlFromCharacterId(string playerId)
    {
        //return $"https:/www.planetside2.com/players/#!/{killboardPlayerId}";
        return $"https:/voidwell.com/ps2/player/{playerId}";
    }

    string GetUrlFromCharacterName(string characterName)
    {
        return $"https:/ps2.fisu.pw/player/?name={characterName.ToLower()}";
    }

    string GetRowBgColor(string victimId, int? victimFactionId)
    {
        if (victimId == playerId)
        {
            return "#F9D3D6a0"; // ffe0f6af"; // F9D3D6"; // FFD2E350"; //FFD2D3";
        }
        else if (victimFactionId != null && victimFactionId == player.FactionId)
        {
            return "#FEF9BF";
        }
        else
        {
            return "";
        }
    }

    string GetKillboardTextColor(string attackerId, int? attackerFactionId, int? victimFactionId)
    {
        int? factionId = (attackerId == player.Id) ? victimFactionId : attackerFactionId;

        return GetFactionColorFromId(factionId);
    }

    string GetKillboardBorderStyle(string victimId)
    {
        return (victimId == player.Id) ? "1px solid #27273a50" : "1px solid rgb(222, 226, 230)";
    }

    string GetFactionColorFromId(int? factionId)
    {
        string color = "#27273A"; // 2F2F2F";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;
        }

        return color;
    }

    string GetFactionLightColorFromId(int? factionId)
    {
        string color = "#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#CABCFF";
                break;

            //NC
            case 2:
                color = "#B6DDFD";
                break;

            //TR
            case 3:
                color = "#FFD2D3";
                break;
        }

        return color;
    }
}
