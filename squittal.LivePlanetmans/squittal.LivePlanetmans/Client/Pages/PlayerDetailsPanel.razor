@page "/playerstats"
@using squittal.LivePlanetmans.Client.Pages.PlayerDetailsViews
@using squittal.LivePlanetmans.Shared.Models
@using System.Diagnostics
@using System.Threading
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (string.IsNullOrWhiteSpace(playerId))
{
    @*<div style="padding: 10px;">*@

    <div class="text-muted" style="margin: 25%; font-size: 1.5rem; text-align: center; display: grid; grid-template-columns: 2rem 1fr; align-items: center; line-height: 1.5rem;">
        <div style="display: inline block;" class="oi oi-arrow-thick-left large"></div>
        <div style="display: inline-block;">
            <em>Select a player to see hourly stats & session details</em>
        </div>
    </div>

    @*</div>*@
}
else
{
    @if (player != null)
    {
        <PlayerDetailsPanelHeader playerId=@playerId playerFactionId=@_playerFactionId />

        <div id="details-body" class="@GetFactionClassFromId(_playerFactionId)" style="padding: 0px 10px; font-family: 'Roboto Mono';">
            
            <PlayerDetailsMainStats playerId=@playerId playerFactionId=@_playerFactionId/>
            
            <div style="margin-top: 0.5rem;">

                <div class="tabbed-button-container"> @*style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; border-top-left-radius: 0.2rem; border-bottom: 2px solid @GetFactionColorFromId(_playerFactionId)80;">*@
                    <button title="Open killboard view" class="btn btn-link @GetViewTabStyle(PlayerDetailsView.kills)" @onclick="@(() => OnSelectNewView(PlayerDetailsView.kills))">Kills this Hour</button>
                    <button title="Open weapons view" class="btn btn-link @GetViewTabStyle(PlayerDetailsView.weapons)" @onclick="@(() => OnSelectNewView(PlayerDetailsView.weapons))">Weapons</button>
                    <button title="Open player head-to-head view" class="btn btn-link @GetViewTabStyle(PlayerDetailsView.players)" @onclick="@(() => OnSelectNewView(PlayerDetailsView.players))">Head-to-Head</button>
                    <button title="Open player loadouts view" class="btn btn-link @GetViewTabStyle(PlayerDetailsView.loadouts)" @onclick="@(() => OnSelectNewView(PlayerDetailsView.loadouts))">Classes</button>
                </div>

                @if (view == viewTranslator[PlayerDetailsView.kills] && (isLoadingKillboard == true || kills == null))
                {
                    <SpinnerEllipsis />
                }


                @if (stats != null && !string.IsNullOrWhiteSpace(view) && view == viewTranslator[PlayerDetailsView.kills])
                {
                    @if (kills == null || isLoadingKillboard == true || loadoutModels == null || profileTypeIdMapping == null)
                    {
                    }
                    else
                    {
                        <div style="max-height: 400px; overflow: auto; border-top: 0px solid @GetFactionColorFromId(_playerFactionId)80; border-bottom: 1px solid @GetFactionColorFromId(_playerFactionId)80; border-top-left-radius: 0.2rem; border-bottom-right-radius: 0.2rem; margin-bottom: 1.5rem;">
                            <table class="table-responsive-sm table" style="font-size: 0.85rem !important;">
                                <tbody style="font-size: small;">
                                    @foreach (var kill in kills)
                                    {
                                        <tr style="background-color:@GetRowBgColor(kill.VictimId, kill.VictimFactionId); color:@GetKillboardTextColor(kill.AttackerId, kill.AttackerFactionId, kill.VictimFactionId) !important; border-top: @GetKillboardBorderStyle(kill.VictimId);">
                                            <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; min-width: 105px; max-width: 110px; width: 7rem; border: inherit;">
                                                @((kill.KillTimestamp - TimeSpan.FromHours(5)).ToLongTimeString())
                                            </td>

                                            <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-left: 0.5rem; max-width: 30px;  width: 1rem; border: inherit;">
                                                @if (kill.VictimId == playerId)
                                                {
                                                    <div class="@GetLoadoutIconClass((int)kill.AttackerLoadoutId) @GetFactionClassFromId(kill.AttackerFactionId)" title="Killed by @loadoutModels.Where(m => m.Id == (int)kill.AttackerLoadoutId).Select(m => m.CodeName).FirstOrDefault()"></div>
                                                }
                                                else
                                                {
                                                    <div class="@GetLoadoutIconClass((int)kill.VictimLoadoutId) @GetFactionClassFromId(kill.VictimFactionId)" title="Killed @loadoutModels.Where(m => m.Id == (int)kill.VictimLoadoutId).Select(m => m.CodeName).FirstOrDefault()"></div>
                                                }
                                            </td>

                                            <td style="padding: 0.1rem 0.3125rem 0.1rem 0; max-width: 55px; width: 1rem; border: inherit;">
                                                @if (kill.VictimId == playerId)
                                                {
                                                    @((string.IsNullOrWhiteSpace(kill.AttackerOutfitAlias)) ? "" : $"[{kill.AttackerOutfitAlias}]")
                                                }
                                                else
                                                {
                                                    @((string.IsNullOrWhiteSpace(kill.VictimOutfitAlias)) ? "" : $"[{kill.VictimOutfitAlias}]")
                                                }
                                            </td>

                                            <td style="padding: 0.1rem 0.75rem 0.1rem 0; border: inherit;">
                                                @if (kill.VictimId == playerId)
                                                {
                                                    <button class="btn btn-link" style="font-size: 0.8rem; padding: 0rem !important; color:@GetKillboardTextColor(kill.AttackerId, kill.AttackerFactionId, kill.VictimFactionId) !important; vertical-align: text-bottom !important; text-align: left;" @onclick="@(() => OnSelectKillboardPlayer(kill.AttackerId, player.WorldId))">
                                                        <div style="display: inline-block; max-width: 250px; overflow: hidden; text-overflow: ellipsis;">@kill.AttackerName</div>
                                                        <div style="display: inline-block; vertical-align: super;">
                                                            <sup>
                                                                @(kill.AttackerBattleRank)
                                                                @if (stats.PrestigeLevel != 0)
                                                                {
                                                                    <span class="oi oi-star small" style="top: -1px; margin-left: -0.1rem;" aria-hidden="true"></span>
                                                                }
                                                            </sup>
                                                        </div>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-link" style="font-size: 0.8rem; padding: 0rem !important; color:@GetKillboardTextColor(kill.AttackerId, kill.AttackerFactionId, kill.VictimFactionId) !important; vertical-align: text-bottom !important; text-align: left;" @onclick="@(() => OnSelectKillboardPlayer(kill.VictimId, player.WorldId))">
                                                        <div style="display: inline-block; max-width: 250px; overflow: hidden; text-overflow: ellipsis; vertical-align: bottom;">@kill.VictimName</div>
                                                        <div style="display: inline-block;">
                                                            <sup>
                                                                @(kill.VictimBattleRank)
                                                                @if (kill.VictimPrestigeLevel != 0)
                                                                {
                                                                    <span class="oi oi-star small" style="top: -1px; margin-left: -0.1rem;" aria-hidden="true"></span>
                                                                }
                                                            </sup>
                                                        </div>
                                                    </button>
                                                }
                                            </td>

                                            <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-left: 0.5rem; max-width: 30px;  width: 1rem; border: inherit;">
                                                @if (kill.IsHeadshot == true)
                                                {
                                                    <span class="oi small oi-target" aria-hidden="true" style="padding-left: 0.3125rem; padding-right: 0.3125rem;"></span>
                                                }
                                            </td>

                                            <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; border: inherit;">
                                                @kill.AttackerWeaponName
                                            </td>

                                            <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-left: 0.5rem; max-width: 30px;  width: 1rem; border: inherit;">
                                                @if (kill.VictimId == playerId)
                                                {
                                                    <div class="@GetLoadoutIconClass((int)kill.VictimLoadoutId) @GetFactionClassFromId(kill.VictimFactionId)" title="Playing as @loadoutModels.Where(m => m.Id == (int)kill.VictimLoadoutId).Select(m => m.CodeName).FirstOrDefault()"></div>
                                                }
                                                else
                                                {
                                                    <div class="@GetLoadoutIconClass((int)kill.AttackerLoadoutId) @GetFactionClassFromId(kill.AttackerFactionId)" title="Playing as @loadoutModels.Where(m => m.Id == (int)kill.AttackerLoadoutId).Select(m => m.CodeName).FirstOrDefault()"></div>
                                                }
                                            </td>

                                            <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; border: inherit;">
                                                @kill.ZoneName
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }


            </div>

            @if (stats != null)
            {
                <PlayerWeaponsDetailsView playerId=@playerId playerFactionId=@stats.FactionId isSelectedView=@isSelectedViewWeapons />
            }

            @if (stats != null)
            {
                <PlayerHeadToHeadDetailsView playerId=@playerId isSelectedView=@isSelectedViewHeadToHead />
            }

            <PlayerLoadoutsDetailsView playerId=@playerId isSelectedView=@isSelectedViewLoadouts />

        </div>

        <div id="details-footer" style="font-family: 'Roboto Mono'; position: absolute; bottom: 0.5rem; height: 1rem; line-height: 1rem;">
            <div>
                <a href="@GetUrlFromCharacterId(player.Id)" title="Open Voidwell player profile" class="text-muted" style="font-size: 0.8rem; padding-left: 0.8rem; font-weight: 400;" target="_blank">
                    @player.Id
                    <span class="h6 oi oi-external-link" style="font-size: 60%; opacity: 0.5;"></span>
                </a>
            </div>
        </div>
    }
}


@code {
    Character player;
    PlayerHourlyStatsData stats;

    PlayerKillboardItem[] kills;

    Loadout[] loadoutModels;
    Profile[] profileModels;

    Dictionary<int, int> profileTypeIdMapping;

    int fetchTries = 0;
    bool isLoadingKillboard = false;
    bool isLoadingCharacter = false;
    bool isLoadingStats = false;
    CancellationTokenSource cts;

    bool isSelectedViewKillboard = false;
    bool isSelectedViewWeapons = false;
    bool isSelectedViewHeadToHead = false;
    bool isSelectedViewLoadouts = false;


    [Parameter]
    public string playerId { get; set; }

    [Parameter]
    public int playerFactionId { get; set; }

    [Parameter]
    public string view { get; set; } = "kills";

    public Dictionary<PlayerDetailsView, string> viewTranslator = GetViewTranslator();

    string renderedPlayerId;

    private int _playerFactionId;

    [Parameter]
    public EventCallback<string> OnKillboardPlayerSelected { get; set; }

    private string killboardPlayerId;
    public string KillboardPlayerId
    {
        get => killboardPlayerId;
        set
        {
            killboardPlayerId = value;
            // Invoke the delegate passing it the changed value
            if (killboardPlayerId != renderedPlayerId)
            {
                OnKillboardPlayerSelected.InvokeAsync(value);
            }
        }
    }


    protected override void OnInitialized()
    {
        if (viewTranslator == null || viewTranslator.Count() == 0)
        {
            viewTranslator = GetViewTranslator();
        }

        if (string.IsNullOrWhiteSpace(view))
        {
            view = viewTranslator[PlayerDetailsView.kills];
        }

        _playerFactionId = playerFactionId;
    }

    protected override async Task OnInitializedAsync()
    {
        var modelsTask = SetUpLoadoutModels();
        var profileTask = SetUpProfileModels();

        await Task.WhenAll(modelsTask, profileTask);

        SetUpLoadoutMapping();

        await OnPlayerIdChange();
    }

    private async Task SetUpLoadoutModels()
    {
        if (loadoutModels == null || loadoutModels.Count() == 0)
        {
            loadoutModels = await Http.GetJsonAsync<Loadout[]>($"api/PlayerHourlyLoadouts/models/loadouts");
        }
    }

    private async Task SetUpProfileModels()
    {
        if (profileModels == null || profileModels.Count() == 0)
        {
            profileModels = await Http.GetJsonAsync<Profile[]>("api/PlayerHourlyLoadouts/models/profiles");
        }
    }

    private void SetUpLoadoutMapping()
    {
        profileTypeIdMapping = loadoutModels.ToDictionary(l => l.Id, l => profileModels.Where(p => p.Id == l.ProfileId).Select(p => p.ProfileTypeId).FirstOrDefault());

        Debug.WriteLine($"loadout mapping == null? {(profileTypeIdMapping == null).ToString()}");
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((playerId != killboardPlayerId || playerId != renderedPlayerId) && !string.IsNullOrEmpty(playerId))
        {
            renderedPlayerId = playerId;
            killboardPlayerId = playerId;

            _playerFactionId = playerFactionId;

            await OnPlayerIdChange();
        }
    }

    private void OnSelectKillboardPlayer(string newPlayerId, int newWorldId)
    {
        KillboardPlayerId = newPlayerId;
    }

    private async Task OnPlayerIdChange()
    {
        fetchTries += 1;
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            // If a process is already underway, cancel it
            if (cts != null)
            {
                cts.Cancel();
            }

            // Set cts to cancel the current process if another table refresh is requested
            CancellationTokenSource newCTS = new CancellationTokenSource();
            cts = newCTS;

            var taskList = new List<Task<HttpResponseMessage>>();

            /* DETAILS & KILLBOARD */
            try
            {
                isLoadingKillboard = true;

                var playerTask = Http.GetAsync($"api/PlayerDetails/{playerId}", cts.Token);
                var statsTask = Http.GetAsync($"api/PlayerDetails/stats/{playerId}", cts.Token);
                var killsTask = Http.GetAsync($"api/PlayerDetails/kills/{playerId}", cts.Token);

                await Task.WhenAll(playerTask, statsTask, killsTask);

                var playerResponse = playerTask.Result;
                var statsResponse = statsTask.Result;
                var killsResponse= killsTask .Result;

                if (playerResponse != null && statsResponse != null && killsResponse != null)
                {
                    var playerJsonString = await playerResponse.Content.ReadAsStringAsync();
                    var statsJsonString = await statsResponse.Content.ReadAsStringAsync();
                    var killsJsonString = await killsResponse.Content.ReadAsStringAsync();

                    cts.Token.ThrowIfCancellationRequested();

                    player = JsonConvert.DeserializeObject<Character>(playerJsonString);
                    stats= JsonConvert.DeserializeObject<PlayerHourlyStatsData>(statsJsonString);
                    kills = JsonConvert.DeserializeObject<PlayerKillboardItem[]>(killsJsonString);

                    _playerFactionId = player.FactionId;
                }
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
                // Debug.WriteLine($"Operation cancelled: player details ({playerId})");
            }
            catch (Exception)
            {
                //Ignore
            }
            finally
            {
                isLoadingKillboard = false;
            }

            // When the process is complete, signal that another process can proceed
            if (cts == newCTS)
            {
                cts = null;
            }
        }
    }

    void SetSelectedViewBools(PlayerDetailsView view)
    {
        isSelectedViewKillboard = (view == PlayerDetailsView.kills);
        isSelectedViewWeapons = (view == PlayerDetailsView.weapons);
        isSelectedViewHeadToHead = (view == PlayerDetailsView.players);
        isSelectedViewLoadouts = (view == PlayerDetailsView.loadouts);
    }

    string GetSessionDisplayTimes()
    {
        var startTime = GetSessionStartTime();
        var endTime = GetSessionEndTime();

        bool endIsNow = (endTime == stats.QueryNowUtc);
        bool sameDates = (startTime.Date == endTime.Date);
        var fiveHours = TimeSpan.FromHours(5);

        if (sameDates == true)
        {
            return endIsNow
                ? $"{(startTime - fiveHours).ToShortTimeString()} - Now"
                : $"{(startTime - fiveHours).ToShortTimeString()} - {(endTime - fiveHours).ToShortTimeString()}";
        }
        else
        {
            return endIsNow
                ? $"{(startTime - fiveHours).ToString("M")} {(startTime - fiveHours).ToShortTimeString()} - Now"
                : $"{(startTime - fiveHours).ToString("M")} {(startTime - fiveHours).ToShortTimeString()} - {(endTime - fiveHours).ToString("M")} {(endTime - fiveHours).ToShortTimeString()}";
        }
    }

    DateTime GetSessionStartTime()
    {
        return (stats.LatestLoginTime ?? stats.QueryStartTime);
    }

    DateTime GetSessionEndTime()
    {
        var sessionEndTime = (stats.LatestLogoutTime ?? stats.QueryNowUtc); // (playerStats.LatestLogoutTime != null) ? (playerStats.LatestLogoutTime ?? nowUtc) : nowUtc;

        if (sessionEndTime <= GetSessionStartTime())
        {
            sessionEndTime = stats.QueryNowUtc;
        }

        return sessionEndTime;
    }

    string GetSessionDurationDisplay()
    {
        var duration = (GetSessionEndTime() - GetSessionStartTime());

        var totalMinutes = (int)Math.Round(duration.TotalMinutes, 0);

        int hours = (totalMinutes / 60);

        var remainder = totalMinutes - (hours * 60);

        string hoursDisplay = (hours > 0) ? $"{hours}h" : string.Empty;
        string minutesDisplay = (remainder > 0) ? $"{remainder}m" : string.Empty;
        string space = (hours > 0 && remainder > 0) ? " " : string.Empty;

        return $"{hoursDisplay}{space}{minutesDisplay}";
    }

    string GetUrlFromCharacterId(string playerId)
    {
        //return $"https:/www.planetside2.com/players/#!/{killboardPlayerId}";
        return $"https:/voidwell.com/ps2/player/{playerId}";
    }

    string GetUrlFromCharacterName(string characterName)
    {
        return $"https:/ps2.fisu.pw/player/?name={characterName.ToLower()}";
    }

    string GetLoadoutIconClass(int loadoutId)
    {
        if (!loadoutModels.Any(m => m.Id == loadoutId) || !profileTypeIdMapping.ContainsKey(loadoutId))
        {
            return string.Empty;
        }

        var profileTypeId = profileTypeIdMapping[loadoutId];
        //var profileTypeId = profile.ProfileTypeId;

        return $"ps2-icon {GetPs2ClassIconName(profileTypeId)}";
    }

    string GetPs2ClassIconName(int profileTypeId)
    {
        switch (profileTypeId)
        {
            case 1:
                return "infil";

            case 3:
                return "la";

            case 4:
                return "medic";

            case 5:
                return "engie";

            case 6:
                return "heavy";

            case 7:
                return "max";

            default:
                return "unknown";
        }
    }


    string GetLoadoutAbbrevFromProfileTypeId(int profileTypeId)
    {
        switch (profileTypeId)
        {
            case 1:
                return "I";

            case 3:
                return "LA";

            case 4:
                return "CM";

            case 5:
                return "E";

            case 6:
                return "HA";

            case 7:
                return "MAX";

            default:
                return "??";
        }
    }

    string GetRowBgColor(string victimId, int? victimFactionId)
    {
        if (victimId == playerId)
        {
            return "#F9D3D6a0"; // ffe0f6af"; // F9D3D6"; // FFD2E350"; //FFD2D3";
        }
        else if (victimFactionId != null && victimFactionId == player.FactionId)
        {
            return "#FEF9BF";
        }
        else
        {
            return "";
        }
    }

    string GetKillboardTextColor(string attackerId, int? attackerFactionId, int? victimFactionId)
    {
        int? factionId = (attackerId == player.Id) ? victimFactionId : attackerFactionId;

        return GetFactionColorFromId(factionId);
    }

    string GetKillboardBorderStyle(string victimId)
    {
        return (victimId == player.Id) ? "1px solid #27273a50" : "1px solid rgb(222, 226, 230)";
    }

    string GetFactionColorFromId(int? factionId)
    {
        string color = "#27273A"; // 2F2F2F";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;
        }

        return color;
    }

    string GetFactionLightColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionLightAlphaColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light-alpha)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light-alpha)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light-alpha)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light-alpha)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionClassFromId(int? factionId)
    {
        string cssClass = "ns"; //table-striped-striped var(--sqp-ps2-ns-primary-light)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                cssClass = "vs"; // var(--sqp-ps2-vs-primary-light)"; //#CABCFF";
                break;

            //NC
            case 2:
                cssClass = "nc"; // var(--sqp-ps2-nc-primary-light)"; //#B6DDFD";
                break;

            //TR
            case 3:
                cssClass = "tr"; // var(--sqp-ps2-tr-primary-light)"; //#FFD2D3";
                break;
        }

        return cssClass;
    }

    string GetViewTabStyle(PlayerDetailsView thisView)
    {
        if (viewTranslator[thisView] == view)
        {
            return $"view-visible";
            //return $"grid-row: 1; background-color: {GetFactionLightColorFromId(_playerFactionId)}; color: var(--sq-black) !important; font-size: 1rem; border-bottom-left-radius: 0; border-bottom-right-radius: 0; text-decoration: none;"; // grid-column: 1; ";
        }
        else
        {
            int gridColumn = (thisView == PlayerDetailsView.kills || (view == viewTranslator[PlayerDetailsView.kills] && thisView == PlayerDetailsView.weapons)) ? 2 : 3;

            return $"view-hidden";
            //return $"grid-row: 1; background-color: transparent; color: var(--blue); font-weight: 400; font-size: 1rem;"; // grid-column: {gridColumn}; ";
        }
    }

    public void OnSelectNewView(PlayerDetailsView newView)
    {
        view = viewTranslator[newView];
        SetSelectedViewBools(newView);
        //StateHasChanged();
    }

    private static Dictionary<PlayerDetailsView, string> GetViewTranslator()
    {
        var views = new Dictionary<PlayerDetailsView, string>();
        views.Add(PlayerDetailsView.kills, "kills");
        views.Add(PlayerDetailsView.weapons, "weapons");
        views.Add(PlayerDetailsView.players, "players");
        views.Add(PlayerDetailsView.loadouts, "loadouts");

        return views;
    }

    public enum PlayerDetailsView
    {
        kills,
        weapons,
        players,
        loadouts
    }
}
