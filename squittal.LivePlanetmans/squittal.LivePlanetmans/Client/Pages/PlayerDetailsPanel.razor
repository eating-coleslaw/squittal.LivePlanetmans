@page "/playerstats"
@page "/playerstats/{characterId}"
@using squittal.LivePlanetmans.Shared.Models
@inject HttpClient Http


@if (string.IsNullOrWhiteSpace(characterId))
{
    <div style="padding: 10px;">
        <h2>Player Details</h2>
        <p class="textu-muted"><em>Select a player</em></p>
    </div>
}
else
{
    //<p>@*Player ID: @characterId*@</p>
    @if (stats != null && player != null)
    {
        <div id="details-header" style="display: grid; grid-template-columns: 1fr 80px; grid-template-rows: 1fr 1rem; border-top: 2px solid @GetFactionColorFromId(player.FactionId); border-top-left-radius: 0.2rem; border-top-right-radius: 0.2rem; padding: 5px 10px;">
            <div class="h2" style="margin-bottom: 0px; word-wrap: break-word;">
                <a href="@GetUrlFromCharacterName(player.Name)" target="_blank" style="color:@GetFactionColorFromId(player.FactionId);">
                    @player.Name
                    <span class="h6 oi oi-external-link"></span>
                </a>
            </div>

            <div style="text-align: right;">
                <span class="h6">@stats.BattleRank</span>
                @if (stats.PrestigeLevel != 0)
                { 
                    <span class="oi oi-star small h6" style="color: #F8BA0F; vertical-align: middle; font-size: 0.8rem; margin-bottom: 0.5rem;" aria-hidden="true"></span> 
                }
                <div class="text-muted" style="font-size: 0.8rem; font-weight: 300; margin-top: -0.3rem;">Battle Rank</div>
            </div>
            
            <div>
                <a href="@GetUrlFromCharacterId(player.Id)" class="text-muted h6" style="font-size: 0.8rem; vertical-align: top; padding-left: 0.8rem;"target="_blank">
                    @player.Id
                    <span class="h6 oi oi-external-link" style="font-size: 60%;"></span>
                </a>
            </div>
            
        </div>

        <div id="details-body" style="padding: 0px 10px;">
            <p>
                @*<h2>@player.Name</h2><span>[@player.Id]</span>*@
                <l>@stats.FactionName [BR @stats.BattleRank~@stats.PrestigeLevel]</l>
                @if (!string.IsNullOrWhiteSpace(stats.OutfitName))
                {
                    <l>Outfit: @stats.OutfitRankName of [@stats.OutfitAlias] @stats.OutfitName</l>
                }
                <l>KDR: @stats.KillDeathRatio (<sup>@stats.Kills</sup>/<sub>@stats.Deaths</sub>)</l>
                <l>Teamkills: @stats.TeamKills</l>
                <l>Suicides: @stats.Suicides</l>
                <l>HSR: @stats.HeadshotRatio (@stats.Headshots)</l>
            </p>

            <h5>Kills This Hour</h5>
            @if (kills == null || isLoadingKillboard == true)
            {
                <p class="text-muted"><em>Loading killboard...</em></p>
            }
            else
            {
                <div style="max-height: 400px; overflow: auto; border-top: 1px solid #27273a50; border-top-left-radius: 0.2rem;">
                    <table class="table-responsive-sm table" style="font-size: 0.85rem !important;">
                        <tbody>
                            @foreach (var kill in kills)
                            {
                                <tr style="background-color:@GetRowBgColor(kill.VictimId, kill.VictimFactionId); color:@GetKillboardTextColor(kill.AttackerId, kill.AttackerFactionId, kill.VictimFactionId); border-top: @GetKillboardBorderStyle(kill.AttackerId);"> @*1px solid #27273a50; border-bottom: 1px solid #27273a50;">*@
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; max-width: 30px;  width: 1rem; border: inherit;">
                                        @if (kill.IsHeadshot == true)
                                        {
                                            <span class="oi small oi-target" aria-hidden="true" style="padding-left: 0.3125rem; padding-right: 0.3125rem;"></span>
                                        }
                                    </td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 5px; max-width: 55px; width: 1rem; border: inherit;">
                                        @if (kill.VictimId == characterId)
                                        {
                                            @((string.IsNullOrWhiteSpace(kill.AttackerOutfitAlias)) ? "" : $"[{kill.AttackerOutfitAlias}]")
                                        }
                                        else
                                        {
                                            @((string.IsNullOrWhiteSpace(kill.VictimOutfitAlias)) ? "" : $"[{kill.VictimOutfitAlias}]")
                                        }
                                    </td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; border: inherit;">
                                        @if (kill.VictimId == characterId)
                                        {
                                            @*@kill.AttackerName*@
                                            <div style="display: inline-block; max-width: 250px; overflow: hidden; text-overflow: ellipsis; vertical-align: bottom;">@kill.AttackerName</div>
                                            <div style="display: inline-block;"><sup> @(kill.AttackerBattleRank) @((kill.AttackerPrestigeLevel == 0) ? "" : $"~{kill.AttackerPrestigeLevel}")</sup></div>
                                        }
                                        else
                                        {
                                            @*@kill.VictimName*@
                                            <div style="display: inline-block; max-width: 250px; overflow: hidden; text-overflow: ellipsis; vertical-align: bottom;">@kill.VictimName</div>
                                            <div style="display: inline-block;"><sup> @(kill.VictimBattleRank) @((kill.VictimPrestigeLevel == 0) ? "" : $"~{kill.VictimPrestigeLevel}")</sup></div>
                                        }
                                    </td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; border: inherit;">
                                        @kill.AttackerWeaponName
                                    </td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; min-width: 105px; max-width: 110px; width: 7rem; border: inherit;">
                                        @((kill.KillTimestamp - TimeSpan.FromHours(5)).ToLongTimeString())
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    }
}

@code {
    Character player;
    PlayerHourlyStatsData stats;

    PlayerKillboardItem[] kills;

    int fetchTries = 0;
    bool isLoadingKillboard = false;

    [Parameter]
    public string characterId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnPlayerIdChange();
    }

    private async Task OnPlayerIdChange()
    {
        fetchTries += 1;
        if (!string.IsNullOrWhiteSpace(characterId) && isLoadingKillboard != true)
        {
            isLoadingKillboard = true;
            try
            {
                Task<Character> playerTask = Http.GetJsonAsync<Character>($"api/PlayerDetails/{characterId}");
                Task<PlayerHourlyStatsData> statsTask = Http.GetJsonAsync<PlayerHourlyStatsData>($"api/PlayerDetails/stats/{characterId}");
                Task<PlayerKillboardItem[]> killsTask = Http.GetJsonAsync<PlayerKillboardItem[]>($"api/PlayerDetails/kills/{characterId}");
                player = await playerTask;
                stats = await statsTask;
                StateHasChanged();
                kills = await killsTask;
                StateHasChanged();
            }
            catch (Exception)
            {
                //Ignore
            }
            isLoadingKillboard = false;
        }
    }

    string GetUrlFromCharacterId(string characterId)
    {
        //return $"https:/www.planetside2.com/players/#!/{characterId}";
        return $"https:/voidwell.com/ps2/player/{characterId}";
    }

    string GetUrlFromCharacterName(string characterName)
    {
        return $"https:/ps2.fisu.pw/player/?name={characterName.ToLower()}";
    }

    string GetRowBgColor(string victimId, int? victimFactionId)
    {
        if (victimId == characterId)
        {
            return "#F9D3D6a0"; // ffe0f6af"; // F9D3D6"; // FFD2E350"; //FFD2D3";
        }
        else if (victimFactionId != null && victimFactionId == player.FactionId)
        {
            return "#FEF9BF";
        }
        else
        {
            return "";
        }
    }

    string GetKillboardTextColor(string attackerId, int? attackerFactionId, int? victimFactionId)
    {
        int? factionId = (attackerId == player.Id) ? victimFactionId : attackerFactionId;

        return GetFactionColorFromId(factionId);
    }

    string GetKillboardBorderStyle(string attackerId)
    {
        return (attackerId == player.Id) ? "1px solid rgb(222, 226, 230)" : "1px solid #27273a50";
    }

    string GetFactionColorFromId(int? factionId)
    {
        string color = "#2F2F2F";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;
        }

        return color;
    }

}
