@using squittal.LivePlanetmans.Shared.Models
@using System.Threading
@using Newtonsoft.Json
@inject HttpClient Http

@if (details != null)
{
    <div id="details-header" class="player-header @GetFactionClassFromId(_playerFactionId)">
        <div class="name">
            <a href="@GetUrlFromCharacterName(details.PlayerName)" title="Open fisu player profile" target="_blank">
                @details.PlayerName
                <span class="oi oi-external-link"></span>
            </a>
        </div>

        <div class="rank h6">
            <span class="h6">@details.BattleRank</span>
            @if (details.PrestigeLevel != 0)
            {
                <span class="oi oi-star small h6" aria-hidden="true"></span>
            }
            <div class="rank-label">Battle Rank</div>
        </div>

        @if (details != null)
        {
            <div class="faction">
                @if (!string.IsNullOrWhiteSpace(details.TitleName))
                {
                    <span>@details.TitleName of the </span>
                }
                <span>@details.FactionName on @details.WorldName</span>
            </div>

            @if (details.OutfitName != null)
            {
                <div class="outfit">
                    @if (!string.IsNullOrWhiteSpace(details.OutfitAlias))
                    {
                        <span class="alias">[@(details.OutfitAlias)] </span>
                    }
                    <span>@(details.OutfitName) </span>
                    <span class="oi oi-caret-right small"></span>
                    <span> @details.OutfitRankName</span>
                </div>
            }

        }

    </div>
}

@code {
    [Parameter]
    public string playerId { get; set; }

    [Parameter]
    public int playerFactionId { get; set; }

    PlayerDetails details;

    bool isLoadingDetails = false;
    CancellationTokenSource cts;

    string renderedPlayerId;

    private int _playerFactionId;


    protected override async Task OnInitializedAsync()
    {
        await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (playerId != renderedPlayerId && !string.IsNullOrEmpty(playerId))
        {
            renderedPlayerId = playerId;
            _playerFactionId = playerFactionId;

            await OnPlayerIdChange();
        }
    }

    private async Task OnPlayerIdChange()
    {
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            // If a process is already underway, cancel it
            if (cts != null)
            {
                cts.Cancel();
            }

            // Set cts to cancel the current process if another table refresh is requested
            CancellationTokenSource newCTS = new CancellationTokenSource();
            cts = newCTS;

            try
            {
                isLoadingDetails = true;
                HttpResponseMessage response = await Http.GetAsync($"api/PlayerDetails/details/{playerId}", cts.Token);

                if (response != null)
                {
                    var jsonString = await response.Content.ReadAsStringAsync();
                    cts.Token.ThrowIfCancellationRequested();
                    details = JsonConvert.DeserializeObject<PlayerDetails>(jsonString);

                    _playerFactionId = details.FactionId;
                }
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
                // Debug.WriteLine($"Operation cancelled: api/PlayerHourlyLoadouts/h2h/{playerId}");
            }
            catch (Exception)
            {
                //Ignore
            }
            finally
            {
                isLoadingDetails = false;
            }

            // When the process is complete, signal that another process can proceed
            if (cts == newCTS)
            {
                cts = null;
            }
        }
    }

    string GetUrlFromCharacterName(string characterName)
    {
        return $"https:/ps2.fisu.pw/player/?name={characterName.ToLower()}";
    }

    string GetFactionColorFromId(int? factionId)
    {
        string color = "#27273A"; // 2F2F2F";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;
        }

        return color;
    }

    string GetFactionLightColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionLightAlphaColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light-alpha)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light-alpha)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light-alpha)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light-alpha)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionClassFromId(int? factionId)
    {
        string cssClass = "ns"; //table-striped-striped var(--sqp-ps2-ns-primary-light)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                cssClass = "vs"; // var(--sqp-ps2-vs-primary-light)"; //#CABCFF";
                break;

            //NC
            case 2:
                cssClass = "nc"; // var(--sqp-ps2-nc-primary-light)"; //#B6DDFD";
                break;

            //TR
            case 3:
                cssClass = "tr"; // var(--sqp-ps2-tr-primary-light)"; //#FFD2D3";
                break;
        }

        return cssClass;
    }
}
