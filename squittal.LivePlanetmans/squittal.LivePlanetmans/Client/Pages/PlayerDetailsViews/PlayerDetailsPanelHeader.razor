@using squittal.LivePlanetmans.Shared.Models
@using System.Threading
@using Newtonsoft.Json
@inject HttpClient Http

@if (details != null)
{
    <div id="details-header" class="player-header @SqCssHelper.GetFactionClassFromId(_playerFactionId)">
        <div class="name">
            <a href="@GetUrlFromCharacterName(details.PlayerName)" title="Open fisu player profile" target="_blank">
                @details.PlayerName
                <span class="oi oi-external-link"></span>
            </a>
        </div>

        <div class="rank h6">
            <span class="h6">@details.BattleRank</span>
            @if (details.PrestigeLevel != 0)
            {
                <span class="oi oi-star small h6" aria-hidden="true"></span>
            }
            <div class="rank-label">Battle Rank</div>
        </div>

        <div class="faction">
            @if (!string.IsNullOrWhiteSpace(details.TitleName))
            {
                <span>@details.TitleName of the </span>
            }
            <span>@details.FactionName on @details.WorldName</span>
        </div>

        @if (details.OutfitName != null)
        {
            <div class="outfit">
                @if (!string.IsNullOrWhiteSpace(details.OutfitAlias))
                {
                    <span class="alias">[@(details.OutfitAlias)] </span>
                }
                <span>@(details.OutfitName) </span>
                <span class="oi oi-caret-right small"></span>
                <span> @details.OutfitRankName</span>
            </div>
        }

    </div>
}

@code {
    [Parameter]
    public string playerId { get; set; }

    [Parameter]
    public int playerFactionId { get; set; }

    PlayerDetails details;

    CancellationTokenSource cts;

    string renderedPlayerId;

    private int _playerFactionId;


    protected override async Task OnInitializedAsync()
    {
        await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (playerId != renderedPlayerId && !string.IsNullOrEmpty(playerId))
        {
            renderedPlayerId = playerId;
            _playerFactionId = playerFactionId;

            await OnPlayerIdChange();
        }
    }

    private async Task OnPlayerIdChange()
    {
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            // If a process is already underway, cancel it
            if (cts != null)
            {
                cts.Cancel();
            }

            // Set cts to cancel the current process if another table refresh is requested
            CancellationTokenSource newCTS = new CancellationTokenSource();
            cts = newCTS;

            try
            {
                HttpResponseMessage response = await Http.GetAsync($"api/PlayerDetails/details/{playerId}", cts.Token);

                if (response != null)
                {
                    var jsonString = await response.Content.ReadAsStringAsync();
                    cts.Token.ThrowIfCancellationRequested();
                    details = JsonConvert.DeserializeObject<PlayerDetails>(jsonString);

                    _playerFactionId = details.FactionId;
                }
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
                //Ignore
            }
            catch (Exception)
            {
                //Ignore
            }

            // When the process is complete, signal that another process can proceed
            if (cts == newCTS)
            {
                cts = null;
            }
        }
    }

    string GetUrlFromCharacterName(string characterName)
    {
        return $"https:/ps2.fisu.pw/player/?name={characterName.ToLower()}";
    }

    //string GetFactionClassFromId(int? factionId)
    //{
    //    string cssClass;

    //    switch (factionId)
    //    {
    //        case 1:
    //            cssClass = "vs";
    //            break;

    //        case 2:
    //            cssClass = "nc";
    //            break;

    //        case 3:
    //            cssClass = "tr";
    //            break;

    //        case 4:
    //            cssClass = "ns";
    //            break;

    //        default:
    //            cssClass = "ns";
    //            break;
    //    }

    //    return cssClass;
    //}
}
