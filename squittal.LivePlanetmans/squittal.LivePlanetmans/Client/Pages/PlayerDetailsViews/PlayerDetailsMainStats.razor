@using squittal.LivePlanetmans.Shared.Models
@using System.Threading
@using Newtonsoft.Json
@inject HttpClient Http

@if (stats != null)
{
    <div class="row @GetFactionClassFromId(_playerFactionId)" style="margin: initial;">
        <div class="sq-mini-card-9" id="details-hourly-stats">

            <h5>Hourly Stats</h5>

            <div class="sq-content">
                <div class="death-event-stats-grid">
                    <div class="sq-badge" title="Kills Per Minute">
                        <div class="text-container @_dataClass">
                            <span>@stats.KillsPerMinute</span>
                            <div>KPM</div>
                        </div>
                    </div>

                    <div class="sq-badge" title="Kill Death Ratio">
                        <div class="text-container @_dataClass">
                            <span>@stats.KillDeathRatio</span>
                            <div>KDR</div>
                        </div>
                    </div>

                    <div class="sq-badge" title="Head Shot Ratio">
                        <div class="text-container percent @_dataClass">
                            <span>@stats.HeadshotRatio</span><span>%</span>
                            <div>HSR</div>
                        </div>
                    </div>

                    <dl class="labeled-stats-grid @_dataClass">
                        <dt>Kills</dt>
                        <dd>@stats.Kills</dd>

                        <dt>Deaths</dt>
                        <dd>@stats.Deaths</dd>

                        <dt>Team Kills</dt>
                        <dd>@stats.TeamKills</dd>

                        <dt>Suicides</dt>
                        <dd>@stats.Suicides</dd>
                    </dl>
                </div>
            </div>
        </div>

        <div id="details-session-stats" class="sq-mini-card-3">
           
            <h5>Play Session</h5>

            <div class="sq-content">

                <div class="sq-text-content @_dataClass">@GetSessionDisplayTimes()</div>

                <dl class="labeled-stats-grid @_dataClass">
                    
                    <dt>Duration</dt>
                    <dd>@GetSessionDurationDisplay()</dd>

                    <dt>Kills</dt>
                    <dd>
                        @if (stats.SessionKills == null)
                        {
                            <span>-</span>
                        }
                        else
                        {
                            <span>@stats.SessionKills</span>
                        }
                    </dd>

                    <dt>KPM</dt>
                    <dd>@if (stats.SessionKills == null)
                        {
                            <span>-</span>
                        }
                        else
                        {
                            <span>@stats.SessionKillsPerMinute</span>
                        }
                    </dd>

                </dl>

            </div>
        </div>

    </div>
}

@code {
    [Parameter]
    public string playerId { get; set; }

    [Parameter]
    public int playerFactionId { get; set; }

    PlayerHourlyStatsData stats;

    bool isLoadingStats = false;
    CancellationTokenSource cts;

    string renderedPlayerId;

    private int _playerFactionId;

    private string _dataClassDefault = string.Empty;
    private string _dataClassLoading = "loading";
    private string _dataClass;


    protected override void OnInitialized()
    {
        _dataClass = _dataClassDefault;
    }

    protected override async Task OnInitializedAsync()
    {
        await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (playerId != renderedPlayerId && !string.IsNullOrEmpty(playerId))
        {
            renderedPlayerId = playerId;
            _playerFactionId = playerFactionId;

            await OnPlayerIdChange();
        }
    }

    private async Task OnPlayerIdChange()
    {
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            // If a process is already underway, cancel it
            if (cts != null)
            {
                cts.Cancel();
            }

            // Set cts to cancel the current process if another table refresh is requested
            CancellationTokenSource newCTS = new CancellationTokenSource();
            cts = newCTS;

            try
            {
                isLoadingStats = true;
                _dataClass = _dataClassLoading;

                HttpResponseMessage response = await Http.GetAsync($"api/PlayerDetails/stats/{playerId}", cts.Token);

                if (response != null)
                {
                    var jsonString = await response.Content.ReadAsStringAsync();
                    cts.Token.ThrowIfCancellationRequested();
                    stats = JsonConvert.DeserializeObject<PlayerHourlyStatsData>(jsonString);

                    _playerFactionId = stats.FactionId;
                    _dataClass = _dataClassDefault;
                }
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
                // Debug.WriteLine($"Operation cancelled: api/PlayerHourlyLoadouts/h2h/{playerId}");
            }
            catch (Exception)
            {
                //Ignore
            }
            finally
            {
                isLoadingStats = false;
            }

            // When the process is complete, signal that another process can proceed
            if (cts == newCTS)
            {
                cts = null;
            }
        }
    }

    string GetSessionDisplayTimes()
    {
        if (stats == null)
        {
            return string.Empty;
        }

        var startTime = GetSessionStartTime();
        var endTime = GetSessionEndTime();

        bool endIsNow = (endTime == stats.QueryNowUtc);
        bool sameDates = (startTime.Date == endTime.Date);
        var fiveHours = TimeSpan.FromHours(5);

        if (sameDates == true)
        {
            return endIsNow
                ? $"{(startTime - fiveHours).ToShortTimeString()} - Now"
                : $"{(startTime - fiveHours).ToShortTimeString()} - {(endTime - fiveHours).ToShortTimeString()}";
        }
        else
        {
            return endIsNow
                ? $"{(startTime - fiveHours).ToString("M")} {(startTime - fiveHours).ToShortTimeString()} - Now"
                : $"{(startTime - fiveHours).ToString("M")} {(startTime - fiveHours).ToShortTimeString()} - {(endTime - fiveHours).ToString("M")} {(endTime - fiveHours).ToShortTimeString()}";
        }
    }

    DateTime GetSessionStartTime()
    {
        return (stats.LatestLoginTime ?? stats.QueryStartTime);
    }

    DateTime GetSessionEndTime()
    {
        var sessionEndTime = (stats.LatestLogoutTime ?? stats.QueryNowUtc); // (playerStats.LatestLogoutTime != null) ? (playerStats.LatestLogoutTime ?? nowUtc) : nowUtc;

        if (sessionEndTime <= GetSessionStartTime())
        {
            sessionEndTime = stats.QueryNowUtc;
        }

        return sessionEndTime;
    }

    string GetSessionDurationDisplay()
    {
        var duration = (GetSessionEndTime() - GetSessionStartTime());

        var totalMinutes = (int)Math.Round(duration.TotalMinutes, 0);

        int hours = (totalMinutes / 60);

        var remainder = totalMinutes - (hours * 60);

        string hoursDisplay = (hours > 0) ? $"{hours}h" : string.Empty;
        string minutesDisplay = (remainder > 0) ? $"{remainder}m" : string.Empty;
        string space = (hours > 0 && remainder > 0) ? " " : string.Empty;

        return $"{hoursDisplay}{space}{minutesDisplay}";
    }

    string GetFactionClassFromId(int? factionId)
    {
        string cssClass;

        switch (factionId)
        {
            case 1:
                cssClass = "vs";
                break;

            case 2:
                cssClass = "nc";
                break;

            case 3:
                cssClass = "tr";
                break;

            case 4:
                cssClass = "ns";
                break;

            default:
                cssClass = "ns";
                break;
        }

        return cssClass;
    }
}
