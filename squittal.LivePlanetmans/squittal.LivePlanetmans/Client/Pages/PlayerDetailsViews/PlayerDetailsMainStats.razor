@using squittal.LivePlanetmans.Shared.Models
@using System.Threading
@using Newtonsoft.Json
@inject HttpClient Http

@if (stats != null)
{
    <div class="row @SqCssHelper.GetFactionClassFromId(_playerFactionId)" style="margin: initial;">
        <div class="sq-mini-card-9" id="details-hourly-stats">

            <h5>Hourly Stats</h5>

            <div class="sq-content">
                <div class="death-event-stats-grid">
                    <div class="sq-badge" title="Kills Per Minute">
                        <div class="text-container @_dataClass">
                            <span>@stats.KillsPerMinute</span>
                            <div>KPM</div>
                        </div>
                    </div>

                    <div class="sq-badge" title="Kill Death Ratio">
                        <div class="text-container @_dataClass">
                            <span>@stats.KillDeathRatio</span>
                            <div>KDR</div>
                        </div>
                    </div>

                    <div class="sq-badge" title="Head Shot Ratio">
                        <div class="text-container percent @_dataClass">
                            <span>@stats.HeadshotRatio</span><span>%</span>
                            <div>HSR</div>
                        </div>
                    </div>

                    <dl class="labeled-stats-grid @_dataClass">
                        <dt>Kills</dt>
                        <dd>@stats.Kills</dd>

                        <dt>Deaths</dt>
                        <dd>@stats.Deaths</dd>

                        <dt>Team Kills</dt>
                        <dd>@stats.TeamKills</dd>

                        <dt>Suicides</dt>
                        <dd>@stats.Suicides</dd>
                    </dl>
                </div>
            </div>
        </div>

        <div id="details-session-stats" class="sq-mini-card-3">
           
            <h5>Play Session</h5>

            <div class="sq-content">

                @*<div class="sq-text-content @_dataClass">@GetSessionDisplayTimes()</div>*@
                <div class="sq-text-content @_dataClass">@stats.SessionBookendTimesDisplay</div>

                <dl class="labeled-stats-grid @_dataClass">

                    <dt>Duration</dt>
                    @*<dd>@GetSessionDurationDisplay()</dd>*@
                    <dd>@stats.SessionDurationDisplay</dd>

                    <dt>Kills</dt>
                    <dd>
                        @if (stats.SessionKills == null)
                        {
                            <span>-</span>
                        }
                        else
                        {
                            <span>@stats.SessionKills</span>
                        }
                    </dd>

                    <dt>KPM</dt>
                    <dd>
                        @if (stats.SessionKills == null)
                        {
                            <span>-</span>
                        }
                        else
                        {
                            <span>@stats.SessionKillsPerMinute</span>
                        }
                </dd>

                </dl>

            </div>
        </div>

    </div>
}

@code {
    [Parameter]
    public string playerId { get; set; }

    [Parameter]
    public int playerFactionId { get; set; }

    PlayerHourlyStatsData stats;

    CancellationTokenSource cts;

    string renderedPlayerId;

    private int _playerFactionId;

    private string _dataClassDefault = string.Empty;
    private string _dataClassLoading = "loading";
    private string _dataClass;


    protected override void OnInitialized()
    {
        _dataClass = _dataClassDefault;
    }

    protected override async Task OnInitializedAsync()
    {
        await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (playerId != renderedPlayerId && !string.IsNullOrEmpty(playerId))
        {
            renderedPlayerId = playerId;
            _playerFactionId = playerFactionId;

            await OnPlayerIdChange();
        }
    }

    private async Task OnPlayerIdChange()
    {
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            // If a process is already underway, cancel it
            if (cts != null)
            {
                cts.Cancel();
            }

            // Set cts to cancel the current process if another table refresh is requested
            CancellationTokenSource newCTS = new CancellationTokenSource();
            cts = newCTS;

            try
            {
                _dataClass = _dataClassLoading;

                HttpResponseMessage response = await Http.GetAsync($"api/PlayerDetails/stats/{playerId}", cts.Token);

                if (response != null)
                {
                    var jsonString = await response.Content.ReadAsStringAsync();
                    cts.Token.ThrowIfCancellationRequested();
                    stats = JsonConvert.DeserializeObject<PlayerHourlyStatsData>(jsonString);

                    _playerFactionId = stats.FactionId;
                    _dataClass = _dataClassDefault;
                }
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
                // Ignore
            }
            catch (Exception)
            {
                //Ignore
            }

            // When the process is complete, signal that another process can proceed
            if (cts == newCTS)
            {
                cts = null;
            }
        }
    }
}
