@using squittal.LivePlanetmans.Shared.Models
@using System.Globalization
@inject HttpClient Http

@if (loadoutsReport == null || isLoadingLoadouts == true)
{
    @if (isSelectedView == true)
    {
        <SpinnerEllipsis />
    }
}
else if (isSelectedView == true)
{
    <div class="row" style="margin: initial; width: 100%; margin-top: 0.5rem; margin-bottom: 1.5rem;">
        <div class="col-sm-12" style="line-height: 1rem; padding: 0.5rem; margin: 0.3125rem 0; border-radius: 0.2rem; background-color: @(GetFactionLightAlphaColorFromId(loadoutsReport.PlayerFactionId)); border-top: 2px solid @GetFactionLightColorFromId(loadoutsReport.PlayerFactionId); margin-right: 0.3125rem; padding: 0;">
            <h5 style="font-size: 1rem; margin-bottom: 0.25rem; padding: 0.5rem 0 0 0.5rem; width: 100%">
                Hourly Loadout Summary
                <span class="text-muted" style="font-size: 0.85rem; font-weight: 300;">@GetLocalizedQueryDateRangeDisplay()</span>
            </h5>
            @if (isLoadingLoadouts != true && loadoutsReport != null)
            {
                <div style="max-height: calc(350px - 1.5rem); overflow: auto; padding: 0 0 0.5rem 0.5rem;">
                    <table class="table-responseive-sm table-striped-light @GetFactionClassFromId(loadoutsReport.PlayerFactionId)" style="width: calc(100% - 0.75rem); font-size: 0.8rem !important; border-bottom: 1px solid @GetFactionLightColorFromId(loadoutsReport.PlayerFactionId);">
                        <thead style="vertical-align: bottom; line-height: 0.5rem;">
                            <tr>
                                <th class="p-name" style="padding-top: 0.3125rem; width: 25px !important;"></th>

                                @foreach (var loadout in loadoutsReport.PlayerLoadouts)
                                {
                                    <th class="stacked-label" title="Head-to-Head Kill-Death Ratio" style="color: @GetFactionColorFromId(loadout.Details.FactionId); padding-top: 0.3125rem;">
@*                                        <span class="small @GetLoadoutIconClass(loadout.Details.Id) @GetFactionClassFromId(loadout.Details.FactionId)" title="@loadout.Details.Name" style="position: initial; margin-bottom: 0.1rem; margin-left: calc(65% - 8px);"></span> *@
                                        @*<span>Kills</span>*@

                                        <CompactKdrStatsGridTableHeader loadoutIconClass=@GetLoadoutIconClass(loadout.Details.Id) factionClass=@GetFactionClassFromId(loadout.Details.FactionId) loadoutName=@loadout.Details.Name />

                                    </th>
                                    @*<th style="padding-bottom: 0.5rem;">D</th>*@
                                    @*<th style="padding-bottom: 0.5rem;">KDR</th>*@
                                }

                                <th style="padding-bottom: 0.5rem; text-align: right;">Total</th>

                                @*<th class="stacked-label" style="padding-bottom: 0.5rem;">
                                    <span class="small" style="position: initial; margin-bottom: 0.1rem;">Total</span>
                                    <span>Kills</span>
                                </th>*@
                                @*<th style="padding-bottom: 0.5rem;">D</th>*@
                                @*<th style="padding-bottom: 0.5rem;">KDR</th>*@
                            </tr>
                        </thead>

                        <tbody>

                            <tr style="color: @GetFactionColorFromId(loadoutsReport.PlayerFactionId)">
                                <td>Total</td>

                                @foreach (var loadout in loadoutsReport.PlayerLoadouts)
                                {
                                    <td style="border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">
                                        <CompactKdrStatsGrid deathEventAggregate=@loadout.Stats/> @*loadout.Stats.Kills*@
                                    </td>
                                    @*<td style="border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">@loadout.Stats.Kills</td>
                                    <td>@loadout.Stats.Deaths</td>
                                    <td>@loadout.Stats.KillDeathRatio</td>*@
                                }

                                <td style="border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId)">
                                    <CompactKdrStatsGrid deathEventAggregate=@loadoutsReport.PlayerStats />
                                </td>
                                @*<td style="border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId)">@loadoutsReport.PlayerStats.Kills</td>*@
                                @*<td>@loadoutsReport.PlayerStats.Deaths</td>*@
                                @*<td>@loadoutsReport.PlayerStats.KillDeathRatio</td>*@
                            </tr>

                            <tr style="height: 0.5rem;"></tr>

                            @foreach (var faction in loadoutsReport.FactionLoadouts)
                            {
                                <tr style="color: @GetFactionColorFromId(faction.Summary.Details.Id); font-weight: 500; border-bottom: 1px solid @GetFactionColorFromId(faction.Summary.Details.Id); background-color: transparent; vertical-align: bottom;">

                                    <td style="padding-top: 0.75rem; width: 160px;">@GetFactionAbbrevFromId(faction.Summary.Details.Id)</td>

                                    @foreach (var playerLoadout in faction.PlayerLoadouts)
                                    {
                                        <td style="border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">
                                            <CompactKdrStatsGrid deathEventAggregate=@playerLoadout.Stats/> @*loadout.Stats.Kills*@
                                        </td>
                                        @*<td style="padding-top: 0.75rem; border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">@playerLoadout.Stats.Kills</td>*@
                                        @*<td style="padding-top: 0.75rem;">@playerLoadout.Stats.Deaths</td>*@
                                        @*<td style="padding-top: 0.75rem;">@playerLoadout.Stats.KillDeathRatio</td>*@
                                    }

                                    <td style="padding-top: 0.75rem; border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">
                                        <CompactKdrStatsGrid deathEventAggregate=@faction.Summary.Stats/> 
                                    </td>
                                    @*<td style="padding-top: 0.75rem; border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">@faction.Summary.Stats.Kills</td>*@
                                    @*<td style="padding-top: 0.75rem;">@faction.Summary.Stats.Deaths</td>*@
                                    @*<td style="padding-top: 0.75rem;">@faction.Summary.Stats.KillDeathRatio</td>*@
                                </tr>

                                @foreach (var factionLoadout in faction.FactionLoadouts)
                                {
                                    <tr style="color: @GetFactionColorFromId(faction.Summary.Details.Id)">

                                        <td>
                                            <div class="@GetLoadoutIconClass(factionLoadout.Summary.Details.Id) @GetFactionClassFromId(factionLoadout.Summary.Details.FactionId)" title="@factionLoadout.Summary.Details.Name"></div>
                                        </td>

                                        @*<td>@factionLoadout.Summary.Details.Name</td>*@

                                        @foreach (var playerLoadout in factionLoadout.PlayerLoadouts)
                                        {
                                            <td style="border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">
                                                <CompactKdrStatsGrid deathEventAggregate=@playerLoadout.Stats />
                                            </td>
                                            @*<td style="border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">@playerLoadout.Stats.Kills</td>*@
                                            @*<td>@playerLoadout.Stats.Deaths</td>*@
                                            @*<td>@playerLoadout.Stats.KillDeathRatio</td>*@
                                        }

                                        <td style="border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">
                                            <CompactKdrStatsGrid deathEventAggregate=@factionLoadout.Summary.Stats />
                                        </td>
                                        @*<td style="border-left: 1px solid @GetFactionColorFromId(loadoutsReport.PlayerFactionId);">@factionLoadout.Summary.Stats.Kills</td>*@
                                        @*<td>@factionLoadout.Summary.Stats.Deaths</td>*@
                                        @*<td>@factionLoadout.Summary.Stats.KillDeathRatio</td>*@
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}


@code {
    [Parameter]
    public string playerId { get; set; }

    [Parameter]
    public bool isSelectedView { get; set; }

    PlayerLoadoutsReport loadoutsReport;

    bool isLoadingLoadouts = false;

    Loadout[] loadoutModels;
    Profile[] profileModels;

    Dictionary<int, int> profileTypeIdMapping;

    string renderedPlayerId;


    protected override async Task OnInitializedAsync()
    {
        //if (loadoutModels == null || loadoutModels.Count() == 0)
        //{
        //    loadoutModels = await Http.GetJsonAsync<Loadout[]>($"api/PlayerHourlyLoadouts/models/loadouts");
        //}
        var modelsTask = SetUpLoadoutModels();
        var profileTask = SetUpProfileModels();

        await Task.WhenAll(modelsTask, profileTask);

        SetUpLoadoutMapping();

        await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (playerId != renderedPlayerId && !string.IsNullOrEmpty(playerId))
        {
            renderedPlayerId = playerId;
            await OnPlayerIdChange();
        }
    }

    private async Task SetUpLoadoutModels()
    {
        if (loadoutModels == null || loadoutModels.Count() == 0)
        {
            loadoutModels = await Http.GetJsonAsync<Loadout[]>($"api/PlayerHourlyLoadouts/models/loadouts");
        }
    }

    private async Task SetUpProfileModels()
    {
        if (profileModels == null || profileModels.Count() == 0)
        {
            profileModels = await Http.GetJsonAsync<Profile[]>("api/PlayerHourlyLoadouts/models/profiles");
        }
    }

    private void SetUpLoadoutMapping()
    {
        profileTypeIdMapping = loadoutModels.ToDictionary(l => l.Id, l => profileModels.Where(p => p.Id == l.ProfileId).Select(p => p.ProfileTypeId).FirstOrDefault());
    }

    private async Task OnPlayerIdChange()
    {
        if (!string.IsNullOrWhiteSpace(playerId) && isLoadingLoadouts != true)
        {
            isLoadingLoadouts = true;

            try
            {
                var loadoutsTask = Http.GetJsonAsync<PlayerLoadoutsReport>($"api/PlayerHourlyLoadouts/h2h/{playerId}");
                loadoutsReport = await loadoutsTask;
                StateHasChanged();

            }
            catch (Exception)
            {
                //Ignore
            }
            finally
            {
                isLoadingLoadouts = false;
            }
        }
    }

    string GetLocalizedQueryDateRangeDisplay()
    {
        if (loadoutsReport.QueryStartTime == null || loadoutsReport.QueryNowUtc == null)
        {
            return string.Empty;
        }

        //var convertedStart = TimeZoneInfo.ConvertTimeFromUtc(loadoutsReport.QueryStartTime, TimeZoneInfo.Local);
        //var convertedEnd = TimeZoneInfo.ConvertTimeFromUtc(loadoutsReport.QueryNowUtc, TimeZoneInfo.Local);

        var convertedStart = loadoutsReport.QueryStartTime - TimeSpan.FromHours(5);
        var convertedEnd = loadoutsReport.QueryNowUtc - TimeSpan.FromHours(5);

        return $"{convertedStart.ToLongTimeString()} - {convertedEnd.ToLongTimeString()}";
    }

    string GetLoadoutIconClass(int loadoutId)
    {
        if (!loadoutModels.Any(m => m.Id == loadoutId) || !profileTypeIdMapping.ContainsKey(loadoutId))
        {
            return string.Empty;
        }

        var profileTypeId = profileTypeIdMapping[loadoutId];

        return $"ps2-icon {GetPs2ClassIconName(profileTypeId)}";
    }

    string GetPs2ClassIconName(int profileTypeId)
    {
        switch (profileTypeId)
        {
            case 1:
                return "infil";

            case 3:
                return "la";

            case 4:
                return "medic";

            case 5:
                return "engie";

            case 6:
                return "heavy";

            case 7:
                return "max";

            default:
                return "unknown";
        }
    }

    string GetFactionColorFromId(int? factionId)
    {
        string color = "#27273A"; // 2F2F2F";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;
        }

        return color;
    }

    string GetFactionLightColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionLightAlphaColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light-alpha)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light-alpha)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light-alpha)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light-alpha)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionClassFromId(int? factionId)
    {
        string cssClass = "ns"; //table-striped-striped var(--sqp-ps2-ns-primary-light)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                cssClass = "vs"; // var(--sqp-ps2-vs-primary-light)"; //#CABCFF";
                break;

            //NC
            case 2:
                cssClass = "nc"; // var(--sqp-ps2-nc-primary-light)"; //#B6DDFD";
                break;

            //TR
            case 3:
                cssClass = "tr"; // var(--sqp-ps2-tr-primary-light)"; //#FFD2D3";
                break;
        }

        return cssClass;
    }

    string GetFactionAbbrevFromId(int factionId)
    {
        switch (factionId)
        {
            //VS
            case 1:
                return "VS";

            //NC
            case 2:
                return "NC";

            //TR
            case 3:
                return "TR";

            default:
                return "NSO";
        }
    }
}
