@using squittal.LivePlanetmans.Shared.Models
@using System.Threading
@using Newtonsoft.Json
@inject HttpClient Http

@if (loadoutsReport == null || isLoadingLoadouts == true)
{
    @if (isSelectedView == true)
    {
        <SpinnerEllipsis />
    }
}
else if (isSelectedView == true)
{
    <div class="row view">
        <div class="sq-mini-card-12">
            <h5>Hourly Classes Summary</h5>
            @if (isLoadingLoadouts != true && loadoutsReport != null)
            {
                <div class="sq-content">
                    <table class="sq-table-fit-content table-striped-light table-stat-grids @GetFactionClassFromId(loadoutsReport.PlayerFactionId)"> @*class="table-responsive-sm" style="max-width: calc(100% - 0.75rem); font-size: 0.8rem !important; border-bottom: 1px solid @GetFactionLightColorFromId(loadoutsReport.PlayerFactionId);">*@
                        <thead class="fit-stacked-labels">
                            <tr>
                                <th></th>

                                @foreach (var loadout in loadoutsReport.PlayerLoadouts)
                                {
                                    <th title="Head-to-Head Kill-Death Ratio">
                                        <LoadoutDetailsColumnHeader loadoutIconClass=@GetLoadoutIconClass(loadout.Details.Id) factionClass=@GetFactionClassFromId(loadout.Details.FactionId) loadoutName=@loadout.Details.Name />
                                    </th>
                                }

                                <th>Total</th>
                            </tr>
                        </thead>

                        <tbody>

                            <tr class="@GetFactionClassFromId(loadoutsReport.PlayerFactionId)">
                                <td>Total</td>

                                @foreach (var loadout in loadoutsReport.PlayerLoadouts)
                                {
                                    <td>
                                        <CompactKdrStatsGrid deathEventAggregate=@loadout.Stats />
                                    </td>
                                }

                                <td>
                                    <CompactKdrStatsGrid deathEventAggregate=@loadoutsReport.PlayerStats />
                                </td>
                            </tr>


                            @foreach (var faction in loadoutsReport.FactionLoadouts)
                            {
                                <tr class="empty-row"></tr>

                                <tr class="stat-group-total @GetFactionClassFromId(faction.Summary.Details.Id)">

                                    <td title="@faction.Summary.Details.Name">@GetFactionAbbrevFromId(faction.Summary.Details.Id)</td>

                                    @foreach (var playerLoadout in faction.PlayerLoadouts)
                                    {
                                        <td>
                                            <CompactKdrStatsGrid deathEventAggregate=@playerLoadout.Stats />
                                        </td>
                                    }

                                    <td>
                                        <CompactKdrStatsGrid deathEventAggregate=@faction.Summary.Stats />
                                    </td>
                                </tr>

                                @foreach (var factionLoadout in faction.FactionLoadouts)
                                {
                                    <tr class="@GetFactionClassFromId(faction.Summary.Details.Id)">

                                        <td>
                                            <div class="@GetLoadoutIconClass(factionLoadout.Summary.Details.Id) @GetFactionClassFromId(factionLoadout.Summary.Details.FactionId)" title="@factionLoadout.Summary.Details.Name"></div>
                                        </td>

                                        @foreach (var playerLoadout in factionLoadout.PlayerLoadouts)
                                        {
                                            <td>
                                                <CompactKdrStatsGrid deathEventAggregate=@playerLoadout.Stats />
                                            </td>
                                        }

                                        <td>
                                            <CompactKdrStatsGrid deathEventAggregate=@factionLoadout.Summary.Stats />
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}


@code {
    [Parameter]
    public string playerId { get; set; }

    [Parameter]
    public bool isSelectedView { get; set; }

    PlayerLoadoutsReport loadoutsReport;

    bool isLoadingLoadouts = false;
    CancellationTokenSource cts;

    Loadout[] loadoutModels;
    Profile[] profileModels;

    Dictionary<int, int> profileTypeIdMapping;

    string renderedPlayerId;


    protected override async Task OnInitializedAsync()
    {
        var modelsTask = SetUpLoadoutModels();
        var profileTask = SetUpProfileModels();

        await Task.WhenAll(modelsTask, profileTask);

        SetUpLoadoutMapping();

        await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (playerId != renderedPlayerId && !string.IsNullOrEmpty(playerId))
        {
            renderedPlayerId = playerId;
            await OnPlayerIdChange();
        }
    }

    private async Task SetUpLoadoutModels()
    {
        if (loadoutModels == null || loadoutModels.Count() == 0)
        {
            loadoutModels = await Http.GetJsonAsync<Loadout[]>($"api/PlayerHourlyLoadouts/models/loadouts");
        }
    }

    private async Task SetUpProfileModels()
    {
        if (profileModels == null || profileModels.Count() == 0)
        {
            profileModels = await Http.GetJsonAsync<Profile[]>("api/PlayerHourlyLoadouts/models/profiles");
        }
    }

    private void SetUpLoadoutMapping()
    {
        profileTypeIdMapping = loadoutModels.ToDictionary(l => l.Id, l => profileModels.Where(p => p.Id == l.ProfileId).Select(p => p.ProfileTypeId).FirstOrDefault());
    }

    private async Task OnPlayerIdChange()
    {
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            // If a process is already underway, cancel it
            if (cts != null)
            {
                cts.Cancel();
            }

            // Set cts to cancel the current process if another table refresh is requested
            CancellationTokenSource newCTS = new CancellationTokenSource();
            cts = newCTS;

            try
            {
                isLoadingLoadouts = true;
                HttpResponseMessage response = await Http.GetAsync($"api/PlayerHourlyLoadouts/h2h/{playerId}", cts.Token);

                if (response != null)
                {
                    var jsonString = await response.Content.ReadAsStringAsync();
                    cts.Token.ThrowIfCancellationRequested();
                    loadoutsReport = JsonConvert.DeserializeObject<PlayerLoadoutsReport>(jsonString);
                }
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
                // Debug.WriteLine($"Operation cancelled: api/PlayerHourlyLoadouts/h2h/{playerId}");
            }
            catch (Exception)
            {
                //Ignore
            }
            finally
            {
                isLoadingLoadouts = false;
            }

            // When the process is complete, signal that another process can proceed
            if (cts == newCTS)
            {
                cts = null;
            }
        }
    }

    string GetLocalizedQueryDateRangeDisplay()
    {
        if (loadoutsReport.QueryStartTime == null || loadoutsReport.QueryNowUtc == null)
        {
            return string.Empty;
        }
        var convertedStart = loadoutsReport.QueryStartTime - TimeSpan.FromHours(5);
        var convertedEnd = loadoutsReport.QueryNowUtc - TimeSpan.FromHours(5);

        return $"{convertedStart.ToLongTimeString()} - {convertedEnd.ToLongTimeString()}";
    }

    string GetLoadoutIconClass(int loadoutId)
    {
        if (!loadoutModels.Any(m => m.Id == loadoutId) || !profileTypeIdMapping.ContainsKey(loadoutId))
        {
            return string.Empty;
        }

        var profileTypeId = profileTypeIdMapping[loadoutId];

        return $"ps2-icon {GetPs2ClassIconName(profileTypeId)}";
    }

    string GetPs2ClassIconName(int profileTypeId)
    {
        switch (profileTypeId)
        {
            case 1:
                return "infil";

            case 3:
                return "la";

            case 4:
                return "medic";

            case 5:
                return "engie";

            case 6:
                return "heavy";

            case 7:
                return "max";

            default:
                return "unknown";
        }
    }

    string GetFactionColorFromId(int? factionId)
    {
        string color = "#27273A"; // 2F2F2F";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;
        }

        return color;
    }

    string GetFactionLightColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionLightAlphaColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light-alpha)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light-alpha)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light-alpha)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light-alpha)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionClassFromId(int? factionId)
    {
        string cssClass;

        switch (factionId)
        {
            case 1:
                cssClass = "vs";
                break;

            case 2:
                cssClass = "nc";
                break;

            case 3:
                cssClass = "tr";
                break;

            case 4:
                cssClass = "ns";
                break;

            default:
                cssClass = "ns";
                break;
        }

        return cssClass;
    }

    string GetFactionAbbrevFromId(int factionId)
    {
        switch (factionId)
        {
            //VS
            case 1:
                return "VS";

            //NC
            case 2:
                return "NC";

            //TR
            case 3:
                return "TR";

            default:
                return "NSO";
        }
    }
}
