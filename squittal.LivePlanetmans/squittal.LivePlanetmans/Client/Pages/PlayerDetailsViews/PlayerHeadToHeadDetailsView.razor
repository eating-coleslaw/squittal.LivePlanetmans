@using squittal.LivePlanetmans.Shared.Models
@inject HttpClient Http

@if (headToHeadSummary == null || isLoadingHeadToHead == true)
{
    @if (isSelectedView == true)
    {
        <SpinnerEllipsis />
    }
}
else if (isSelectedView == true)
{
    <div class="row" style="margin: initial; width: 100%; margin-top: 0.5rem; margin-bottom: 1.5rem;">
        <div class="col-sm-6" style="line-height: 1rem; padding: 0.5rem; margin: 0.3125rem 0; border-radius: 0.2rem; background-color: @(GetFactionLightAlphaColorFromId(playerFactionId)); border-top: 2px solid @GetFactionLightColorFromId(playerFactionId); flex-basis: calc(50% - 0.3125rem); margin-right: 0.3125rem; padding: 0;">
            <h5 style="font-size: 1rem; margin-bottom: 0.25rem; padding: 0.5rem 0 0 0.5rem; width: 100%">Top Victims</h5>
            @if (headToHeadSummary != null && headToHeadSummary.TopPlayersByKills.Any() == true && isLoadingHeadToHead != true)
            {

                <div style="max-height: calc(350px - 1.5rem); overflow: auto; padding: 0 0 0.5rem 0.5rem;">
                    <table class="table-responseive-sm table-striped-light @GetFactionClassFromId(playerFactionId)" style="width: calc(100% - 0.75rem); font-size: 0.8rem !important; border-bottom: 1px solid @GetFactionLightColorFromId(playerFactionId);">
                        <thead style="vertical-align: bottom; line-height: 0.5rem;">
                            <tr>
                                <th class="p-name" style="padding-bottom: 0.5rem;"></th>
                                <th style="padding-bottom: 0.5rem;">K</th>
                                <th style="padding-bottom: 0.5rem;">D</th>
                                <th class="stacked-label" title="Head-to-Head Kill-Death Ratio" style="padding-bottom: 0.5rem;">
                                    <span class="small" style="position: initial; margin-bottom: 0.1rem;">H2H</span>
                                    <span>KDR</span>
                                </th>
                                <th class="stacked-label" title="Head-to-Head Headshot Ratio" style="padding-bottom: 0.5rem;">
                                    <span class="small" style="position: initial; margin-bottom: 0.1rem;">H2H</span>
                                    <span>HSR</span>
                                </th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var player in headToHeadSummary.TopPlayersByKills)
                            {
                                <tr style="color: @GetFactionColorFromId(player.VictimFactionId)">
                                    <td>@player.VictimName</td>
                                    <td>@player.AttackerKills</td>
                                    <td>@player.VictimKills</td>
                                    <td>@player.AttackerKillDeathRatio</td>
                                    <td>@player.AttackerHeadshotRatio</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <div class="col-sm-6" style="line-height: 1rem; padding: 0.5rem; margin: 0.3125rem 0; border-radius: 0.2rem; background-color: @(GetFactionLightAlphaColorFromId(playerFactionId)); border-top: 2px solid @GetFactionLightColorFromId(playerFactionId);">
            <h5 style="font-size: 1rem; margin-bottom: 0.25rem;">Top Nemeses</h5>
            @if (headToHeadSummary != null && headToHeadSummary.TopPlayersByDeaths.Any() == true && isLoadingHeadToHead != true)
            {

                <div style="max-height: calc(350px - 1.5rem); overflow: auto;">
                    <table class="table-responseive-sm table-striped-light @GetFactionClassFromId(playerFactionId)" style="width: calc(100% - 0.75rem); font-size: 0.8rem !important;">
                        <thead style="vertical-align: bottom; line-height: 0.5rem;">
                            <tr>
                                <th class="p-name" style="padding-bottom: 0.5rem;"></th>
                                <th style="padding-bottom: 0.5rem;">K</th>
                                <th style="padding-bottom: 0.5rem;">D</th>
                                <th class="stacked-label" title="Head-to-Head Kill-Death Ratio" style="padding-bottom: 0.5rem;">
                                    <span class="small" style="position: initial; margin-bottom: 0.1rem;">H2H</span>
                                    <span>KDR</span>
                                </th>
                                <th class="stacked-label" title="Head-to-Head Headshot Ratio" style="padding-bottom: 0.5rem;">
                                    <span class="small" style="position: initial; margin-bottom: 0.1rem;">H2H</span>
                                    <span>HSR</span>
                                </th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var player in headToHeadSummary.TopPlayersByDeaths)
                            {
                                <tr style="color: @GetFactionColorFromId(player.AttackerFactionId)">
                                    <td>@player.AttackerName</td>
                                    <td>@player.VictimKills</td>
                                    <td>@player.AttackerKills</td>
                                    <td>@player.VictimKillDeathRatio</td>
                                    <td>@player.VictimHeadshotRatio</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string playerId { get; set; }

    [Parameter]
    public int playerFactionId { get; set; } = 4;

    [Parameter]
    public bool isSelectedView { get; set; }

    PlayerHourlyHeadToHeadSummary headToHeadSummary;

    bool isLoadingHeadToHead = false;

    string renderedPlayerId;


    protected override async Task OnInitializedAsync()
    {
        await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (playerId != renderedPlayerId && !string.IsNullOrEmpty(playerId))
        {
            renderedPlayerId = playerId;
            await OnPlayerIdChange();
        }
    }

    private async Task OnPlayerIdChange()
    {
        if (!string.IsNullOrWhiteSpace(playerId) && isLoadingHeadToHead != true)
        {
            isLoadingHeadToHead = true;

            /* Player Head-To-Head */
            try
            {
                Task<PlayerHourlyHeadToHeadSummary> headToHeadTask = Http.GetJsonAsync<PlayerHourlyHeadToHeadSummary>($"api/PlayerHourlyHeadToHead/players/{playerId}");
                headToHeadSummary = await headToHeadTask;
                StateHasChanged();

            }
            catch (Exception)
            {
                //Ignore
            }
            finally
            {
                isLoadingHeadToHead = false;
            }
        }
    }

    string GetFactionColorFromId(int? factionId)
    {
        string color = "#27273A"; // 2F2F2F";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;
        }

        return color;
    }

    string GetFactionLightColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionLightAlphaColorFromId(int? factionId)
    {
        string color = "var(--sq-ps2-ns-primary-light-alpha)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                color = "var(--sq-ps2-vs-primary-light-alpha)"; //#CABCFF";
                break;

            //NC
            case 2:
                color = "var(--sq-ps2-nc-primary-light-alpha)"; //#B6DDFD";
                break;

            //TR
            case 3:
                color = "var(--sq-ps2-tr-primary-light-alpha)"; //#FFD2D3";
                break;
        }

        return color;
    }

    string GetFactionClassFromId(int? factionId)
    {
        string cssClass = "ns"; //table-striped-striped var(--sqp-ps2-ns-primary-light)"; //#a4a4c2"; // 27273A"; //"FFF2F0";

        switch (factionId)
        {
            //VS
            case 1:
                cssClass = "vs"; // var(--sqp-ps2-vs-primary-light)"; //#CABCFF";
                break;

            //NC
            case 2:
                cssClass = "nc"; // var(--sqp-ps2-nc-primary-light)"; //#B6DDFD";
                break;

            //TR
            case 3:
                cssClass = "tr"; // var(--sqp-ps2-tr-primary-light)"; //#FFD2D3";
                break;
        }

        return cssClass;
    }
}
