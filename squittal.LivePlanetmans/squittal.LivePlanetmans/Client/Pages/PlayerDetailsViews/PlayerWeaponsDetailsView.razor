@using squittal.LivePlanetmans.Shared.Models
@using System.Threading
@using Newtonsoft.Json
@inject HttpClient Http

@if ((weaponsReport == null) || isLoadingWeapons == true)
{
    @if (isSelectedView == true)
    {
        <SpinnerEllipsis />
    }
}
else if (isSelectedView == true)
{
    <div class="row view @GetFactionClassFromId(weaponsReport.PlayerFactionId)">
        <div class="sq-mini-card-6">
            <h5>Top Weapons By Kills</h5>
            @if (weaponsReport != null && weaponsReport.TopWeaponsByKills.Any() == true && isLoadingWeapons != true)
            {

                <div class="sq-content">
                    <table class="table-responsive-sm table-striped-light @GetFactionClassFromId(playerFactionId)">
                        <thead>
                            <tr>
                                <th class="p-name"></th>
                                <th>Kills</th>
                                <th>HSR</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var weapon in weaponsReport.TopWeaponsByKills)
                            {
                                <tr class="@GetFactionClassFromId(weapon.FactionId)">
                                    <td>@weapon.WeaponName</td>
                                    <td>@weapon.WeaponStats.Kills</td>
                                    <td>@weapon.WeaponStats.HeadshotRatio</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <div class="sq-mini-card-6">
            <h5>Top Weapons By Deaths</h5>
            @if (weaponsReport != null && weaponsReport.TopWeaponsByDeaths.Any() == true && isLoadingWeapons != true)
            {

                <div class="sq-content">
                    <table class="table-responsive-sm table-striped-light @GetFactionClassFromId(playerFactionId)">
                        <thead style="vertical-align: bottom;">
                            <tr>
                                <th class="p-name"></th>
                                <th>Deaths</th>
                                <th>HSR</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var weapon in weaponsReport.TopWeaponsByDeaths)
                            {
                                <tr class="@GetFactionClassFromId(weapon.FactionId)">
                                    <td>@weapon.WeaponName</td>
                                    <td>@weapon.WeaponStats.Deaths</td>
                                    <td>@weapon.WeaponStats.HeadshotDeathRatio</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string playerId { get; set; }

    [Parameter]
    public int playerFactionId { get; set; } = 4;

    [Parameter]
    public bool isSelectedView { get; set; }

    bool isLoadingWeapons = false;
    CancellationTokenSource cts;

    HourlyPlayerWeaponsReport weaponsReport;

    string renderedPlayerId;


    protected override async Task OnInitializedAsync()
    {
        await OnPlayerIdChange();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (playerId != renderedPlayerId && !string.IsNullOrEmpty(playerId))
        {
            renderedPlayerId = playerId;
            await OnPlayerIdChange();
        }
    }

    private async Task OnPlayerIdChange()
    {
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            // If a process is already underway, cancel it
            if (cts != null)
            {
                cts.Cancel();
            }

            // Set cts to cancel the current process if another table refresh is requested
            CancellationTokenSource newCTS = new CancellationTokenSource();
            cts = newCTS;

            try
            {
                isLoadingWeapons = true;

                HttpResponseMessage response = await Http.GetAsync($"api/PlayerHourlyWeapons/weapons/{playerId}", cts.Token);


                if (response != null)
                {
                    var jsonString = await response.Content.ReadAsStringAsync();

                    cts.Token.ThrowIfCancellationRequested();

                    weaponsReport = JsonConvert.DeserializeObject<HourlyPlayerWeaponsReport>(jsonString);
                }
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
                // Ignore
            }
            catch (Exception)
            {
                // Ignore
            }
            finally
            {
                isLoadingWeapons = false;
            }

            // When the process is complete, signal that another process can proceed
            if (cts == newCTS)
            {
                cts = null;
            }
        }
    }

    string GetFactionClassFromId(int? factionId)
    {
        string cssClass;

        switch (factionId)
        {
            case 1:
                cssClass = "vs";
                break;

            case 2:
                cssClass = "nc";
                break;

            case 3:
                cssClass = "tr";
                break;

            case 4:
                cssClass = "ns";
                break;

            default:
                cssClass = "ns";
                break;
        }

        return cssClass;
    }

}
