@page "/leaderboard"
@page "/leaderboard/{worldId}"
@using squittal.LivePlanetmans.Shared.Models
@using System.Timers
@using System.Linq
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container-fluid">
    @*<div class="row">
            <div class="col-12">
                <p class="h2 display-4" style="font-size: 2.5rem;">
                    @if (!string.IsNullOrWhiteSpace(selectedWorldName))
                    {
                        <span style="color: var(--pink)">@selectedWorldName Top Players</span>
                    }
                    else
                    {
                        <span>Live Activity</span>
                    }
                </p>
            </div>
        </div>*@
    <div class="row">
        <div class="col-lg-6" style="border: 2px solid #d4d4ff5a !important; border-radius: 0.2rem; padding: 10px; margin: 0px; background-color: #fcf6ff;">
            <p class="h2 display-4" style="font-size: 2.5rem; color: #e34f8c;">
                @if (!string.IsNullOrWhiteSpace(selectedWorldName))
                {
                    <span style="color: var(--pink)">@selectedWorldName Top Players</span>
                }
                else
                {
                    <span>Live Activity</span>
                }
            </p>

            <div>
                @if (string.IsNullOrWhiteSpace(selectedWorldName))
                {
                    <ServerSelectMenu selectedWorldId="@worldId" />
                }
                else
                {
                    <ServerSelectMenu />
                }

                @if (players != null)
                {
                    <button class="btn btn-outline-primary btn-sm" @onclick="RefreshTableManual">Refresh</button>
                    <span class="text-muted" style="font-size: 0.8rem; vertical-align: bottom;">Last Refresh: @lastRefreshTime.ToLongTimeString()</span>
                }
                @if (isLoading == true)
                {
                    <span class="text-muted" style="font-size: 0.8rem; vertical-align: bottom;">(loading)</span>
                }
            </div>

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <p><em>@errorMessage</em></p>
            }
            else
            {
                <table class="table-striped table-responsive-sm" style="width: inherit;">
                    <thead>
                        <tr>
                            <th style="padding-right: 5px; max-width: 55px; width: 1rem;"></th> @*//Outfit*@
                            <th style="padding-right: 10px;">Player</th>
                            <th style="padding-right: 10px; max-width: 65px; width: 1rem;">Kills</th>
                            <th style="padding-right: 10px; max-width: 65px; width: 1rem;">Deaths</th>
                            <th style="padding-right: 10px; max-width: 65px; width: 1rem;">KDR</th>
                            <th style="padding-right: 10px; max-width: 65px; width: 1rem;">KPM</th>
                            <th style="padding-right: 10px; max-width: 65px; width: 1rem;">HSR</th>
                            <th style="padding-right: 10px; max-width: 65px; width: 1rem;"></th>
                            @*<th style="padding-right: 10px;">TKs</th>
                                <th style="padding-right: 10px;">Suicides</th>*@
                            <th style="padding-right: 10px; max-width: 65px; width: 1rem;"></th>
                        </tr>
                    </thead>
                    @if (players != null && isChangingWorld != true)
                    {
                        <tbody style="font-size: 0.85rem !important;">
                            @foreach (var player in players)
                            {
                                <tr style="color:@GetFactionColorFromId(player.FactionId)">
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 5px;">
                                        @((string.IsNullOrWhiteSpace(player.OutfitAlias)) ? "" : $"[{player.OutfitAlias}]")
                                    </td>
                                    @if (string.IsNullOrWhiteSpace(player.PlayerName))
                                    {
                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.PlayerId</td>
                                    }
                                    else
                                    {
                                        @*<td><a href="@GetUrlFromCharacterName(player.PlayerName)" target="_blank">@player.PlayerName</a></td>*@
                                        @*<td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.PlayerName</td>*@
                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">
                                            <div style="display: inline-block; max-width: 250px; overflow: hidden; text-overflow: ellipsis; vertical-align: bottom;">@player.PlayerName </div>
                                            <div style="display: inline-block;">
                                                <sup>
                                                    @(player.BattleRank)
                                                    @if (player.PrestigeLevel != 0)
                                                    {
                                                        <span class="oi oi-star small" style="top: -1px; margin-left: -0.1rem;" aria-hidden="true"></span>
                                                    }
                                                </sup>
                                            </div>
                                            @*<div style="display: inline-block;"><sup> @(player.BattleRank) @((player.PrestigeLevel == 0) ? "" : $"~{player.PrestigeLevel}")</sup></div>*@
                                            @*@GetLeaderboardPlayerString(player)*@
                                        </td>
                                    }
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.Kills</td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.Deaths</td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.KillDeathRatio</td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.KillsPerMinute</td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.HeadshotRatio</td>
                                    @*<td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.TeamKills</td>
                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.Suicides</td>*@
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.LatestZoneName</td>
                                    <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">
                                        <button class="btn btn-link" style="font-size: 0.8rem; padding: 0rem !important;" @onclick="@(() => OnSelectPlayer(player.PlayerId))">Select</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    }
                </table>
            }

            @if (players == null || isChangingWorld == true)
            {
                <p class="text-muted"><em>Loading...</em></p>
            }

        </div>

        <div class="col-lg-6" style="border: 2px solid #d4d4ff5a !important; border-radius: 0.2rem; padding: 0px; margin: 0px; background-color: #fcf6ff;">
            <PlayerDetailsPanel characterId="@playerId" />
        </div>
    </div>

    @*<div class="row">
            <div class="col-sm-5">
                <p></p>
                <p class="h4">Debug Info</p>
                <table class="table-sm table">
                    <thead>
                        <tr></tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><b>Status:</b></td>
                            <td>@debugMessage</td>
                        </tr>
                        <tr>
                            <td><b>Auto-Refreshes</b></td>
                            <td>@autoRefreshCount</td>
                        </tr>
                        <tr>
                            <td><b>Last Refresh:</b></td>
                            <td>@lastRefreshTime.ToLongTimeString()</td>
                        </tr>
                        <tr>
                            <td><b>Query Start:</b></td>
                            <td>@queryStartTimestamp</td>
                        </tr>
                        <tr>
                            <td><b>Query End:</b></td>
                            <td>@queryEndTimestamp</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>*@

</div>


@code {
    [Parameter]
    public int worldId { get; set; } = 17;

    [Parameter]
    public string playerId { get; set; } = "";

    World[] worlds;
    string selectedWorldName = "";

    PlayerHourlyStatsData[] players;
    bool isLoading = false;
    bool isChangingWorld = false;
    DateTime lastRefreshTime;
    string errorMessage = "";

    Timer autoRefreshTimer;
    int autoRefreshCount = 0;
    string refreshSource = "";

    string debugMessage = "";
    string queryStartTimestamp = "";
    string queryEndTimestamp = "";

    string selectedPlayer = "";

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("worldId", out var qWorldId))
        {
            worldId = Int32.Parse(qWorldId.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("playerId", out var qPlayerId))
        {
            playerId = qPlayerId.First(); 
        }

        debugMessage = "setting up server info";
        StateHasChanged();
        await SetUpWorlds();
        //await ChangeSelectedWorld(worldId);
        StateHasChanged();

        if (!string.IsNullOrWhiteSpace(playerId))
        {
            OnSelectPlayer(playerId);
        }

        //debugMessage = "first load";
        //StateHasChanged();
        //await RefreshTable();
        debugMessage = "initial load complete";
    }

    protected override async Task OnParametersSetAsync()
    {
        await ChangeSelectedWorld(worldId);
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            OnSelectPlayer(playerId);
        }
    }

    async Task SetUpWorlds()
    {
        worlds = await Http.GetJsonAsync<World[]>("api/Worlds");
        if (worlds.Any() == true)
        {
            selectedWorldName = worlds.Where(w => w.Id == worldId).Select(w => w.Name).FirstOrDefault(); //"success1"; //= worlds.FirstOrDefault(w => w.Id == worldId).Name;
            await ChangeSelectedWorld(worldId);
        }
    }

    async Task ChangeSelectedWorld(int newWorldId)
    {
        worldId = newWorldId;

        if (worlds.Any() == true)
        {
            isChangingWorld = true;
            selectedWorldName = worlds.Where(w => w.Id == worldId).Select(w => w.Name).FirstOrDefault(); //worlds.Where(w => w.Id == worldId).FirstOrDefault().Name; // "success2"; // worlds.FirstOrDefault(w => w.Id == worldId).Name;
            await RefreshTable();
            isChangingWorld = false;
        }

    }

    async Task RefreshTableManual()
    {
        refreshSource = "manual";
        errorMessage = string.Empty;
        StateHasChanged();
        await RefreshTable();
    }

    async Task RefreshTable()
    {
        if (isLoading != true || isChangingWorld == true)
        {
            isLoading = true;
            debugMessage = "refreshing table";
            if (autoRefreshTimer != null)
            {
                debugMessage = "stopping timer";
                autoRefreshTimer.Stop();
                StateHasChanged();
            }

            try
            {
                Task<PlayerHourlyStatsData[]> playersTask = Http.GetJsonAsync<PlayerHourlyStatsData[]>($"api/PlayerLeaderboard/{worldId}");
                //Task<PlayerHourlyStatsData[]> playersTask = Http.GetJsonAsync<PlayerHourlyStatsData[]>($"api/PlayerLeaderboard/test/{worldId}");
                UpdateQueryDateTimes();
                players = await playersTask;
            }
            catch (Exception ex)
            {
                errorMessage = $"error: {ex}";
            }

            lastRefreshTime = (DateTime.Now.ToUniversalTime() - TimeSpan.FromHours(5));
            GetNewAutoRefreshTimer();
            isLoading = false;
            debugMessage = "refresh complete";
            StateHasChanged();
        }
    }

    void GetNewAutoRefreshTimer()
    {
        debugMessage = "getting new timer";
        autoRefreshTimer = new Timer(10000);
        autoRefreshTimer.Elapsed += async (sender, e) => await OnAutoRefreshTimeElapsed();
        autoRefreshTimer.AutoReset = true; //TODO: should this be false?
        autoRefreshTimer.Enabled = true;
    }

    async Task OnAutoRefreshTimeElapsed() //Object source, ElapsedEventArgs e)
    {
        debugMessage = "auto-refresh triggered";
        refreshSource = "auto";
        StateHasChanged();
        if (isLoading != true)
        {
            try
            {
                await RefreshTable();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                debugMessage = $"error: {ex}";
            }

        }
        autoRefreshCount += 1;
        debugMessage = "auto-refresh completed";
        StateHasChanged();
    }

    string GetUrlFromCharacterId(string characterId)
    {
        return $"https:/www.planetside2.com/players/#!/{characterId}";
    }

    string GetUrlFromCharacterName(string characterName)
    {
        return $"https:/ps2.fisu.pw/player/?name={characterName.ToLower()}";
    }

    void OnSelectPlayer(string characterId)
    {
        selectedPlayer = characterId;
        playerId = selectedPlayer;
    }

    void UpdateQueryDateTimes()
    {
        DateTime nowUtc = DateTime.UtcNow;
        DateTime startTime = nowUtc - TimeSpan.FromHours(1);

        if (nowUtc.Date == startTime.Date)
        {
            queryStartTimestamp = $"{startTime.ToLongTimeString()}";
            queryEndTimestamp = $"{nowUtc.ToLongTimeString()}";
        }
        else
        {
            queryStartTimestamp = $"{startTime.ToShortDateString()} {startTime.ToLongTimeString()}";
            queryEndTimestamp = $"{nowUtc.ToShortDateString()} {nowUtc.ToLongTimeString()}";
        }

        //queryDateTimes = $"nowUtc: {nowUtc.ToLongTimeString()} | startTime: {startTime.ToLongTimeString()}";
        StateHasChanged();
        //Task<string> datesTask = Http.GetJsonAsync<string>("api/PlayerLeaderboard");
        //queryDateTimes = await datesTask;
    }

    string GetFactionColorFromId(int factionId)
    {
        string color = "#2F2F2F";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;
        }

        return color;
    }

    string GetLeaderboardPlayerString(PlayerHourlyStatsData player)
    {
        string name = (!string.IsNullOrWhiteSpace(player.PlayerName)) ? player.PlayerName : player.PlayerId;

        string outfit = (!string.IsNullOrWhiteSpace(player.OutfitAlias)) ? $"[{player.OutfitAlias}]" : "";

        string br = (player.PrestigeLevel == 0) ? $"[BR {player.BattleRank}]" : $"[BR {player.BattleRank}*1]";

        //return $"{outfit} {name} {br}";
        return $"{name} {br}";
    }
}
