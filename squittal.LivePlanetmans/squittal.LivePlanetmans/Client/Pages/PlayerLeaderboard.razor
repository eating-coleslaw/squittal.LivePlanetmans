@page "/"
@page "/leaderboard"
@page "/activity"
@*@page "/leaderboard/{worldId}"*@
@using squittal.LivePlanetmans.Shared.Models
@using System.Timers
@using System.Linq
@using System.Threading
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@
@using System.Diagnostics
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6" style="border: 2px solid #d4d4ff5a !important; border-radius: 0.2rem; padding: 0px; margin: 0px; margin-right: 5px; margin-bottom: 10px; background-color: #fcf6ff;">
            <div class="h2" style="font-size: 2rem; font-family: 'Roboto Mono'; color: #e34f8c; margin-bottom: 0px; padding: 5px 10px; border-top: 2px solid var(--pink); border-radius: 0.2rem; display: grid; grid-template-columns: 1fr 100px 150px; align-content: center;">

                @* Leaderboard Title *@
                @if (!string.IsNullOrWhiteSpace(selectedWorldName))
                {
                    <div style="color: var(--pink)">@selectedWorldName Top Players</div>
                }
                else
                {
                    <div>Live Activity</div>
                }


                @* Refresh Button *@
                @if (players != null)
                {
                    <button class="btn btn-outline-primary btn-sm refresh" @onclick="RefreshTableManual">Refresh</button>
                }
                else
                {
                    <button class="btn btn-outline-primary btn-sm refresh placeholder"></button>
                }

                @* Server Select Menu *@
                @if (worlds == null)
                {
                    <div class="styled-select" style="color: transparent; background-color: #007bff10; border-color: #007bff05;">Server</div>
                }
                else
                {
                    <div class="styled-select">
                        <select id="worldSelect" @onchange="OnWorldIdChange" class="btn-sm">
                            <option value="" class="text-muted" style="font-style:italic">Server</option>
                            @foreach (var world in worlds)
                            {
                                @if (world.Id != 25) //RIP Briggs
                                {
                                    <option value="@world.Id.ToString()" style="font-family: 'Roboto Mono'; font-size: small;">@world.Name</option>
                                }
                            }
                        </select>
                    </div>
                }

                @* Last Refresh*@
                @if (players != null && isChangingWorld == false)
                {
                    <span class="sub-header muted" >
                        Last Refresh: @lastRefreshTime.ToLongTimeString()

                        @if (isLoading == true)
                        {
                            <span class="temp">[loading...]</span>
                        }

                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <span class="oi oi-warning small" title="#@errorCount @errorMessage"></span>
                        }

                    </span>
                }
                else
                {
                    <div style="font-size: 0.8rem;">
                        <span style="background-color: #6c757d15; width: 95px; border-radius: 0.2rem;  height: 0.8rem; display: inline-block; color: transparent; vertical-align: bottom;"></span>
                        <span style="background-color: #6c757d15; width: 75px; border-radius: 0.2rem;  height: 0.8rem; margin-left: 0.5rem; vertical-align: middle; display: inline-block;"></span>
                    </div>
                }

            </div>

            <div style="padding: 5px 10px;">
                    <table class="table-striped table-responsive-sm leaderboard-table">
                        <thead>
                            <tr>
                                <th class="icon"></th> 
                                <th class="alias"></th>
                                <th class="p-name">Player</th>
                                <th>Kills</th>
                                <th>Deaths</th>
                                <th>KDR</th>
                                <th>KPM</th>
                                <th>HSR</th>
                                <th class="gap-left stacked-label">
                                    <span class="small">Session</span>
                                    <span>KPM</span>
                                </th>
                                <th class="stacked-label med">
                                    <span class="small">Play<br></span>
                                    <span>Time</span>    
                                </th>
                            </tr>
                        </thead>
                        @if (players != null && isChangingWorld != true)
                        {
                            <tbody style="font-family: 'Roboto Mono'; font-size: small !important;">
                                @foreach (var player in players)
                                {
                                <tr style="color: @GetFactionColorFromId(player.FactionId);">
                                    @if (player.IsOnline == true)
                                    {
                                        <td class="emoji-container">
                                            <div title="Online: @player.LatestZoneName" class="emoji">@GetZoneDisplayEmoji(player.LatestZoneName)</div>
                                        </td>
                                    }
                                    else
                                    {
                                        <td class="icon-container">
                                            <span class="oi oi-moon small"></span>
                                        </td>
                                    }
                                        <td class="alias">
                                            @((string.IsNullOrWhiteSpace(player.OutfitAlias)) ? "" : $"[{player.OutfitAlias}]")
                                        </td>

                                        <td>
                                            <button class="btn btn-link inline-player-br" style="color: @GetFactionColorFromId(player.FactionId);" @onclick="@(() => OnSelectPlayer(player.PlayerId))">
                                                @if (string.IsNullOrWhiteSpace(player.PlayerName))
                                                {
                                                    @player.PlayerId
                                                }
                                                else
                                                {
                                                    <div class="player-name">@player.PlayerName </div>
                                                    <div>
                                                        <sup>
                                                            @(player.BattleRank)
                                                            @if (player.PrestigeLevel != 0)
                                                            {
                                                                <span class="oi oi-star small" aria-hidden="true"></span>
                                                            }
                                                        </sup>
                                                    </div>
                                                    @*</td>*@
                                                }
                                            </button>
                                        </td>

                                        <td>@player.Kills</td>
                                        <td >@player.Deaths</td>
                                        <td >@player.KillDeathRatio</td>
                                        <td >@player.KillsPerMinute</td>
                                        <td >@player.HeadshotRatio</td>
                                        <td class="med">
                                            @((player.SessionKillsPerMinute != null) ? player.SessionKillsPerMinute.ToString() : "-")
                                        </td>
                                        <td title="@GetSessionDisplayTimes(player)">@GetSessionDurationDisplay(player)</td>
                                    </tr>
                                }
                            </tbody>
                        }
                    </table>
                @*}*@


                @if (players == null || isChangingWorld == true)
                {
                    <p class="text-muted" style="margin-left: 1rem; font-weight: 400;"><em>Loading...</em></p>
                }
            </div>

        </div>

        <div id="player-details" class="col-lg-6" style="border: 2px solid @GetPlayerDetailsBorderColor() !important; border-radius: 0.2rem; padding: 0px; margin: 0px; margin-left: 5px; background-color: @GetPlayerDetailsBackgroundColor();">
            <PlayerDetailsPanel playerId="@playerId" OnKillboardPlayerSelected="KillboardPlayerSelected"/> @*worldId="@worldId" OnCharacterIdChanged="KillboardPlayerSelected"/>*@
        </div>
    </div>
        
</div>


@code {
    [Parameter]
    public int worldId { get; set; } = 17;

    [Parameter]
    public string playerId { get; set; } = "";

    Zone[] zones;
    World[] worlds;
    string selectedWorldName = "";

    CancellationTokenSource cts;


    PlayerHourlyStatsData[] players;
    bool isLoading = false;
    bool isChangingWorld = false;
    bool isFetchingLeaderboard = false;
    bool isLeaderboardReady = false;
    bool isInitialized = false;
    bool isInitializedAsync = false;

    DateTime lastRefreshTime;
    string errorMessage = "";
    int errorCount = 0;

    System.Timers.Timer autoRefreshTimer;

    string selectedPlayer = "";



    protected override void OnInitialized()
    {
        Debug.WriteLine($"IsInitialized={isInitialized}");

        if (isInitialized == true) { return; }
        isInitialized = true;

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("worldId", out var qWorldId))
        {
            worldId = Int32.Parse(qWorldId.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("playerId", out var qPlayerId))
        {
            playerId = qPlayerId.First();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Debug.WriteLine($"IsInitialized Async={isInitializedAsync}");

        if (isInitializedAsync == true) { return; }
        isInitializedAsync = true;

        Debug.WriteLine($"=== Start Initializing: {worldId}");


        //var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        //if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("worldId", out var qWorldId))
        //{
        //    worldId = Int32.Parse(qWorldId.First());
        //}

        //if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("playerId", out var qPlayerId))
        //{
        //    playerId = qPlayerId.First();
        //}


        var InitTaskList = new List<Task>();

        Task worldsTask = SetUpWorlds();
        InitTaskList.Add(worldsTask);
        Task zonesTask = SetUpZones();
        InitTaskList.Add(zonesTask);

        await Task.WhenAll(InitTaskList);

        Debug.WriteLine($" = End Initialization: {worldId} =");

        //StateHasChanged();

        //if (!string.IsNullOrWhiteSpace(playerId))
        //{
        //    OnSelectPlayer(playerId);
        //}

        //await RefreshTable();
    }

    protected override async Task OnParametersSetAsync()
    {
        Debug.WriteLine($" == Start Parameters Set: {worldId} ==");

        await ChangeSelectedWorld(worldId);
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            OnSelectPlayer(playerId);
        }

        Debug.WriteLine($" == End Parameters Set: {worldId} ==");
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Debug.WriteLine($"* Render Complete *");
    }

    async Task SetUpWorlds()
    {
        worlds = await Http.GetJsonAsync<World[]>("api/Worlds");
        if (worlds.Any() == true)
        {
            selectedWorldName = worlds.Where(w => w.Id == worldId).Select(w => w.Name).FirstOrDefault(); //"success1"; //= worlds.FirstOrDefault(w => w.Id == worldId).Name;
        }
    }

    async Task SetUpZones()
    {
        zones = await Http.GetJsonAsync<Zone[]>("api/Zones");
    }

    async Task ChangeSelectedWorld(int newWorldId)
    {
        worldId = newWorldId;

        if (worlds.Any() == true)
        {
            isChangingWorld = true;
            isLeaderboardReady = false;
            if (autoRefreshTimer != null)
            {
                autoRefreshTimer.Stop(); // Dispose(); // Close(); Stop();
            }
            selectedWorldName = worlds.Where(w => w.Id == worldId).Select(w => w.Name).FirstOrDefault(); //worlds.Where(w => w.Id == worldId).FirstOrDefault().Name; // "success2"; // worlds.FirstOrDefault(w => w.Id == worldId).Name;
            if (!string.IsNullOrWhiteSpace(playerId))
            {
                NavigationManager.NavigateTo($"/activity?worldId={worldId}&playerId={playerId}");
            }
            else
            {
                NavigationManager.NavigateTo($"/activity?worldId={worldId}");
            }
            await RefreshTable("ChangedSelectedWorld");
            isChangingWorld = false;
        }

    }

    async Task RefreshTableManual()
    {
        await RefreshTable("Manual");
    }

    async Task RefreshTable(string source) //, CancellationToken cancellationToken)
    {
        if (isLoading != true || isChangingWorld == true)
        {
            isLoading = true;
            Debug.WriteLine($"Table Refresh requested by {source} with worldId={worldId} & playerId={playerId}");

            if (autoRefreshTimer != null)
            {
                autoRefreshTimer.Stop(); // Dispose(); //Stop();
                Debug.WriteLine("Stopped AutoRefresh Timer");
            }

            // If a process is already underway, cancel it
            if (cts != null)
            {
                cts.Cancel();
            }

            // Set cts to cancel the current process if another table refresh is requested
            CancellationTokenSource newCTS = new CancellationTokenSource();
            cts = newCTS;

            try
            {

                isFetchingLeaderboard = true;
                //Task<PlayerHourlyStatsData[]> playersTask = Http.GetJsonAsync<PlayerHourlyStatsData[]>($"api/PlayerLeaderboard/{worldId}");

                DateTime start = DateTime.UtcNow;
                Debug.WriteLine($"Fetching leaderboard data for world {worldId}");

                HttpResponseMessage response = await Http.GetAsync($"api/PlayerLeaderboard/{worldId}", cts.Token);

                if (response != null)
                {
                    DateTime end1 = DateTime.UtcNow;
                    var elapsed1 = (int)(end1 - start).TotalMilliseconds;

                    Debug.WriteLine($"Elapsed1 = {elapsed1}ms");

                    var jsonString = await response.Content.ReadAsStringAsync();
                    cts.Token.ThrowIfCancellationRequested();
                    Debug.WriteLine($"Deserializing players object");
                    players = JsonConvert.DeserializeObject<PlayerHourlyStatsData[]>(jsonString);

                    ResolveLatestZoneNames();
                }

                //players = await playersTask;

                DateTime end = DateTime.UtcNow;
                var elapsed = (int)(end - start).TotalMilliseconds;
                Debug.WriteLine($"Finished fetching leaderboard data for world {worldId} in {elapsed}ms");

                isFetchingLeaderboard = false;
                isLeaderboardReady = true;

                lastRefreshTime = (DateTime.Now.ToUniversalTime() - TimeSpan.FromHours(5));
                isLoading = false;
                isChangingWorld = false;
                StateHasChanged();
                Debug.WriteLine("Refreshed Table StateHasChanged!");
                GetNewAutoRefreshTimer();
            }
            catch (OperationCanceledException)
            {
                Debug.WriteLine($"Operation cancelled ({worldId})");
            }

            catch (Exception ex)
            {
                errorMessage = $"error: {ex}";
                errorCount += 1;
            }

            // When the process is complete, signal that another process can proceed
            if (cts == newCTS)
            {
                cts = null;
            }

            //lastRefreshTime = (DateTime.Now.ToUniversalTime() - TimeSpan.FromHours(5));
            //GetNewAutoRefreshTimer();
            //isLoading = false;
            //StateHasChanged();
        }
    }

    void ResolveLatestZoneNames()
    {
        if (players.Any() == true)
        {
            foreach (var player in players)
            {
                player.LatestZoneName = zones.FirstOrDefault(z => z.Id == player.LatestZoneId)?.Name ?? string.Empty;
            }
        }
    }

    void GetNewAutoRefreshTimer()
    {
        Debug.WriteLine($"Getting new AutoRefresh Timer (isLoading={isLoading}, isChangingWorld={isChangingWorld})");
        autoRefreshTimer = new System.Timers.Timer(10000);
        autoRefreshTimer.Elapsed += async (sender, e) => await OnAutoRefreshTimeElapsed(worldId);
        autoRefreshTimer.AutoReset = true; //TODO: should this be false?
        autoRefreshTimer.Enabled = true;
        Debug.WriteLine($"Finished getting new AutoRefresh Timer (isLoading={isLoading}, isChangingWorld={isChangingWorld})");
    }

    async Task OnAutoRefreshTimeElapsed(int initWorldId)
    {
        Debug.WriteLine($"AutoRefreshTimerElapsed ({initWorldId} / {worldId})");

        if (isLoading != true && isChangingWorld != true && (autoRefreshTimer != null && autoRefreshTimer.Enabled == true))
        {
            try
            {
                await RefreshTable($"AutoRefreshTimerElapsed ({initWorldId} / {worldId})");
            }
            catch (Exception)
            {
                //Ignore
            }
        }
        StateHasChanged();
    }

    string GetUrlFromCharacterId(string characterId)
    {
        return $"https:/www.planetside2.com/players/#!/{characterId}";
    }

    string GetUrlFromCharacterName(string characterName)
    {
        return $"https:/ps2.fisu.pw/player/?name={characterName.ToLower()}";
    }

    void OnSelectPlayer(string characterId)
    {
        selectedPlayer = characterId;
        playerId = selectedPlayer;

        NavigationManager.NavigateTo($"/activity?worldId={worldId}&playerId={playerId}");
    }

    async void OnWorldIdChange(ChangeEventArgs eventArgs)
    {
        var newWorldId = eventArgs.Value.ToString();

        Debug.WriteLine($"ChangedSelectedWorld: {worldId} => {newWorldId}");

        if (!string.IsNullOrWhiteSpace(newWorldId) && newWorldId != "Server")
        {
            worldId = Int32.Parse(newWorldId);
        }

        await ChangeSelectedWorld(worldId);
    }

    public void KillboardPlayerSelected(string characterId)
    {
        OnSelectPlayer(characterId);
    }

    DateTime GetSessionStartTime(PlayerHourlyStatsData player)
    {
        return (player.LatestLoginTime ?? player.QueryStartTime);
    }

    DateTime GetSessionEndTime(PlayerHourlyStatsData player)
    {
        var sessionEndTime = (player.LatestLogoutTime ?? player.QueryNowUtc);

        if (sessionEndTime <= GetSessionStartTime(player))
        {
            sessionEndTime = player.QueryNowUtc;
        }

        return sessionEndTime;
    }

    string GetSessionDurationDisplay(PlayerHourlyStatsData player)
    {
        var duration = (GetSessionEndTime(player) - GetSessionStartTime(player));

        var totalMinutes = (int)Math.Round(duration.TotalMinutes, 0);

        int hours = (totalMinutes / 60);

        var remainder = totalMinutes - (hours * 60);

        string hoursDisplay = (hours > 0) ? $"{hours}h" : string.Empty;
        string minutesDisplay = (remainder > 0) ? $"{remainder}m" : string.Empty;
        string space = (hours > 0 && remainder > 0) ? " " : string.Empty;

        return $"{hoursDisplay}{space}{minutesDisplay}";
    }

    string GetSessionDisplayTimes(PlayerHourlyStatsData player)
    {
        var startTime = GetSessionStartTime(player);
        var endTime = GetSessionEndTime(player);

        bool endIsNow = (endTime == player.QueryNowUtc);
        bool sameDates = (startTime.Date == endTime.Date);
        var fiveHours = TimeSpan.FromHours(5);

        if (sameDates == true)
        {
            return endIsNow
                ? $"{(startTime - fiveHours).ToShortTimeString()} - Now"
                : $"{(startTime - fiveHours).ToShortTimeString()} - {(endTime - fiveHours).ToShortTimeString()}";
        }
        else
        {
            return endIsNow
                ? $"{(startTime - fiveHours).ToString("M")} {(startTime - fiveHours).ToShortTimeString()} - Now"
                : $"{(startTime - fiveHours).ToString("M")} {(startTime - fiveHours).ToShortTimeString()} - {(endTime - fiveHours).ToString("M")} {(endTime - fiveHours).ToShortTimeString()}";
        }

    }

    string GetPlayerDetailsBorderColor()
    {
        return (!string.IsNullOrWhiteSpace(playerId)) ? "#d4d4ff5a" : "transparent";
    }

    string GetPlayerDetailsBackgroundColor()
    {
        return (!string.IsNullOrWhiteSpace(playerId)) ? "#fcf6ff" : "transparent;";
    }

    string GetZoneDisplayEmoji(string zoneName)
    {
        switch (zoneName)
        {
            case "Amerish":
                return "🗻";

            case "Esamir":
                return "❄️";

            case "Hossin":
                return "🌳";

            case "Indar":
                return "☀️";

            default:
                return "❔";
        }
    }

    string GetFactionColorFromId(int factionId)
    {
        string color = "#27273A";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;

            //NS
            case 4:
                color = "var(--sq-ns-primary)";
                break;
        }

        return color;
    }

    string GetLeaderboardPlayerString(PlayerHourlyStatsData player)
    {
        string name = (!string.IsNullOrWhiteSpace(player.PlayerName)) ? player.PlayerName : player.PlayerId;

        string outfit = (!string.IsNullOrWhiteSpace(player.OutfitAlias)) ? $"[{player.OutfitAlias}]" : "";

        string br = (player.PrestigeLevel == 0) ? $"[BR {player.BattleRank}]" : $"[BR {player.BattleRank}*1]";

        return $"{name} {br}";
    }
}
