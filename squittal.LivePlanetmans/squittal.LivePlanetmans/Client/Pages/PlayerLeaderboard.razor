@page "/leaderboard"
@using squittal.LivePlanetmans.Shared.Models
@using System.Timers
@inject HttpClient Http

<h2>
    Live Activity
    @if (players != null)
    {
        <button class="btn btn-outline-primary btn-sm" @onclick="RefreshTable">
            <!--span class="oi small oi-reload" aria-hidden="true"></span--> Refresh
        </button>
    }
</h2>

<p>
    Last Refresh: @lastRefreshTime.ToLongTimeString()
    @if (isLoading == true)
    {
        <span>(loading)</span>
    }
    (@autoRefreshCount auto-refreshes)
</p>
<p>Debug: @debugMessage</p>

<table class="table">
    <thead>
        <tr>
            <th>Player ID</th>
            <th>Kills</th>
            <th>Deaths</th>
            <th>KDR</th>
            <th>KPM</th>
        </tr>
    </thead>
    @if (players != null)
    {
        <tbody>
            @foreach (var player in players)
            {
                <tr>
                    <td><a href="@GetUrlFromCharacterId(player.PlayerId)" target="_blank">@player.PlayerId</a></td>
                    <td>@player.Kills</td>
                    <td>@player.Deaths</td>
                    <td>@player.KillDeathRatio</td>
                    <td>@player.KillsPerMinute</td>
                </tr>
            }
        </tbody>
    }
</table>

@if (players == null)
{

    <p><em>Loading...</em></p>
}

@code {
    PlayerHourlyStatsData[] players;
    bool isLoading = false;
    DateTime lastRefreshTime;

    Timer autoRefreshTimer;
    int autoRefreshCount = 0;

    string debugMessage = "";

    protected override async Task OnInitializedAsync()
    {
        debugMessage = "first load";
        await RefreshTable();
        /*
        isLoading = true;
        Task<PlayerHourlyStatsData[]> playersTask = Http.GetJsonAsync<PlayerHourlyStatsData[]>("api/PlayerLeaderboard");
        players = await playersTask;
        isLoading = false;

        GetNewAutoRefreshTimer
        */
    }

    async Task RefreshTable()
    {
        if (isLoading != true)
        {
            isLoading = true;
            debugMessage = "refreshing table";
            if (autoRefreshTimer != null)
            {
                debugMessage = "stopping timer";
                autoRefreshTimer.Stop();
            }

            Task<PlayerHourlyStatsData[]> playersTask = Http.GetJsonAsync<PlayerHourlyStatsData[]>("api/PlayerLeaderboard");
            players = await playersTask;

            lastRefreshTime = DateTime.Now.ToLocalTime();
            GetNewAutoRefreshTimer();
            isLoading = false;
        }
    }

    void GetNewAutoRefreshTimer()
    {
        debugMessage = "getting new timer";
        autoRefreshTimer = new Timer(10000);
        autoRefreshTimer.Elapsed += async ( sender, e ) => await OnAutoRefreshTimeElapsed();
        autoRefreshTimer.AutoReset = true; //TODO: should this be false?
        autoRefreshTimer.Enabled = true;
    }

    async Task OnAutoRefreshTimeElapsed() //Object source, ElapsedEventArgs e)
    {
        debugMessage = "auto-refresh triggered";
        await RefreshTable();
        StateHasChanged();
        autoRefreshCount += 1;
        debugMessage = "refresh completed";
    }

    string GetUrlFromCharacterId(string characterId)
    {
        return $"https:/www.planetside2.com/players/#!/{characterId}";
    }
}
