@page "/leaderboard"
@page "/leaderboard/{worldId}"
@using squittal.LivePlanetmans.Shared.Models
@using System.Timers
@using System.Linq
@inject HttpClient Http


<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <p class="h1 display-4" style="color: var(--gray);">Live Activity
                @if (string.IsNullOrWhiteSpace(selectedWorldName))
                {
                    <ServerSelectMenu selectedWorldId="@worldId" />
                }
                else
                {
                    <ServerSelectMenu />
                }
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <h3>
                @if  (!string.IsNullOrWhiteSpace(selectedWorldName))
                {
                    <span style="color: var(--pink)">@selectedWorldName Top Players</span>
                }
                else
                {
                    <span>Live Activity</span>
                }
                @if (players != null)
                {
                    <button class="btn btn-outline-primary btn-sm" @onclick="RefreshTableManual">
                        Refresh
                    </button>
                }
            </h3>

            <p class="text-muted">
                Last Refresh: @lastRefreshTime.ToLongTimeString()
                @if (isLoading == true)
                {
                    <span>(loading)</span>
                }
                (@autoRefreshCount auto-refreshes)
            </p>

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <p><em>@errorMessage</em></p>
            }
            else if (players == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table-striped table-sm">
                    <thead>
                        <tr>
                            <th>Player</th>
                            <th>Kills</th>
                            <th>Deaths</th>
                            <th>KDR</th>
                            <th>KPM</th>
                            <th></th>
                        </tr>
                    </thead>
                    @if (players != null)
                    {
                        <tbody>
                            @foreach (var player in players)
                            {
                            <tr style="color:@GetFactionColorFromId(player.FactionId)">
                                @if (string.IsNullOrWhiteSpace(player.PlayerName))
                                {
                                    <td>@player.PlayerId</td>
                                }
                                else
                                {
                                    @*<td><a href="@GetUrlFromCharacterName(player.PlayerName)" target="_blank">@player.PlayerName</a></td>*@
                                    <td>@player.PlayerName</td>
                                }
                                <td>@player.Kills</td>
                                <td>@player.Deaths</td>
                                <td>@player.KillDeathRatio</td>
                                <td>@player.KillsPerMinute</td>
                                <td>
                                    <button class="btn btn-link" @onclick="@(() => OnSelectPlayer(player.PlayerId))">Select</button>
                                </td>
                            </tr>
                            }
                        </tbody>
                    }
                </table>
            }
    </div>

    <div class="col-sm-6 border-light">
                <PlayerDetailsPanel characterId="@selectedPlayer" />
        <h4>Debug Info</h4>
        <table class="table-sm tabls">
            <thead>
                <tr></tr>
            </thead>
            <tbody>
                <tr>
                    <td><b>Status:</b></td>
                    <td>@debugMessage</td>
                </tr>
                <tr>
                    <td><b>Auto-Refreshes</b></td>
                    <td>@autoRefreshCount</td>
                </tr>
                <tr>
                    <td><b>Last Refresh:</b></td>
                    <td>@lastRefreshTime.ToLongTimeString()</td>
                </tr>
                <tr>
                    <td><b>Query Start:</b></td>
                    <td>@queryStartTimestamp</td>
                </tr>
                <tr>
                    <td><b>Query End:</b></td>
                    <td>@queryEndTimestamp</td>
                </tr>
            </tbody>
        </table>
        </div>

    </div>
</div>


@code {
    [Parameter]
    public int worldId { get; set; } = 17;

    World[] worlds;
    string selectedWorldName = "";

    PlayerHourlyStatsData[] players;
    bool isLoading = false;
    DateTime lastRefreshTime;
    string errorMessage = "";

    Timer autoRefreshTimer;
    int autoRefreshCount = 0;
    string refreshSource = "";

    string debugMessage = "";
    string queryStartTimestamp = "";
    string queryEndTimestamp = "";

    string selectedPlayer = "";

    protected override async Task OnInitializedAsync()
    {
        debugMessage = "setting up server info";
        StateHasChanged();
        await SetUpWorlds();
        await ChangeSelectedWorld(worldId);
        StateHasChanged();

        debugMessage = "first load";
        StateHasChanged();
        await RefreshTable();
        debugMessage = "initial load complete";
    }

    protected override async Task OnParametersSetAsync()
    {
        await ChangeSelectedWorld(worldId);
    }

    async Task SetUpWorlds()
    {
        //Task<World[]> worldTask = Http.GetJsonAsync<World[]>("api/Worlds");
        worlds = await Http.GetJsonAsync<World[]>("api/Worlds"); ; // await worldTask;
        if (worlds.Any() == true)
        {
            selectedWorldName = worlds.Where(w => w.Id == worldId).Select(w => w.Name).FirstOrDefault(); //"success1"; //= worlds.FirstOrDefault(w => w.Id == worldId).Name;
        }
        else
        {
            selectedWorldName = "test1";
        }
        await ChangeSelectedWorld(worldId);
    }

    async Task ChangeSelectedWorld(int newWorldId)
    {
        worldId = newWorldId;

        if (worlds.Any() == true)
        {
            selectedWorldName = worlds.Where(w => w.Id == worldId).Select(w => w.Name).FirstOrDefault(); //worlds.Where(w => w.Id == worldId).FirstOrDefault().Name; // "success2"; // worlds.FirstOrDefault(w => w.Id == worldId).Name;
        }
        else
        {
            selectedWorldName = "test2";
        }

        await RefreshTable();
    }

    async Task RefreshTableManual()
    {
        refreshSource = "manual";
        errorMessage = string.Empty;
        StateHasChanged();
        await RefreshTable();
    }

    async Task RefreshTable()
    {
        if (isLoading != true)
        {
            isLoading = true;
            debugMessage = "refreshing table";
            if (autoRefreshTimer != null)
            {
                debugMessage = "stopping timer";
                autoRefreshTimer.Stop();
                StateHasChanged();
            }

            try
            {
                Task<PlayerHourlyStatsData[]> playersTask = Http.GetJsonAsync<PlayerHourlyStatsData[]>($"api/PlayerLeaderboard/{worldId}");
                UpdateQueryDateTimes();
                players = await playersTask;
            }
            catch (Exception ex)
            {
                errorMessage = $"error: {ex}";
            }

            lastRefreshTime = (DateTime.Now.ToUniversalTime() - TimeSpan.FromHours(5));
            GetNewAutoRefreshTimer();
            isLoading = false;
            debugMessage = "refresh complete";
            StateHasChanged();
        }
    }

    void GetNewAutoRefreshTimer()
    {
        debugMessage = "getting new timer";
        autoRefreshTimer = new Timer(10000);
        autoRefreshTimer.Elapsed += async (sender, e) => await OnAutoRefreshTimeElapsed();
        autoRefreshTimer.AutoReset = true; //TODO: should this be false?
        autoRefreshTimer.Enabled = true;
    }

    async Task OnAutoRefreshTimeElapsed() //Object source, ElapsedEventArgs e)
    {
        debugMessage = "auto-refresh triggered";
        refreshSource = "auto";
        StateHasChanged();
        if (isLoading != true)
        {
            try
            {
                await RefreshTable();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                debugMessage = $"error: {ex}";
            }

        }
        autoRefreshCount += 1;
        debugMessage = "auto-refresh completed";
        StateHasChanged();
    }

    string GetUrlFromCharacterId(string characterId)
    {
        return $"https:/www.planetside2.com/players/#!/{characterId}";
    }

    string GetUrlFromCharacterName(string characterName)
    {
        return $"https:/ps2.fisu.pw/player/?name={characterName.ToLower()}";
    }

    void OnSelectPlayer(string characterId)
    {
        selectedPlayer = characterId;
    }

    void UpdateQueryDateTimes()
    {
        DateTime nowUtc = DateTime.UtcNow;
        DateTime startTime = nowUtc - TimeSpan.FromHours(1);

        if (nowUtc.Date == startTime.Date)
        {
            queryStartTimestamp = $"{startTime.ToLongTimeString()}";
            queryEndTimestamp = $"{nowUtc.ToLongTimeString()}";
        }
        else
        {
            queryStartTimestamp = $"{startTime.ToShortDateString()} {startTime.ToLongTimeString()}";
            queryEndTimestamp = $"{nowUtc.ToShortDateString()} {nowUtc.ToLongTimeString()}";
        }

        //queryDateTimes = $"nowUtc: {nowUtc.ToLongTimeString()} | startTime: {startTime.ToLongTimeString()}";
        StateHasChanged();
        //Task<string> datesTask = Http.GetJsonAsync<string>("api/PlayerLeaderboard");
        //queryDateTimes = await datesTask;
    }

    string GetFactionColorFromId(int factionId)
    {
        string color = "#2F2F2F";
        
        switch (factionId)
        {
            //VS
            case 1:
                color = "#6A4CE0";
                break;

            //NC
            case 2:
                color = "#1E99FC";
                break;

            //TR
            case 3:
                color = "#FF6C70";
                break;
        }

        return color;
    }
}
