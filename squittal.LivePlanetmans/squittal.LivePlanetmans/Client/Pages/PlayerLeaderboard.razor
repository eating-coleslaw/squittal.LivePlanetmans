@page "/leaderboard"
@*@page "/leaderboard/{worldId}"*@
@using squittal.LivePlanetmans.Shared.Models
@using System.Timers
@using System.Linq
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6" style="border: 2px solid #d4d4ff5a !important; border-radius: 0.2rem; padding: 0px; margin: 0px; background-color: #fcf6ff;">
            <p class="h2 display-4" style="font-size: 2.5rem; color: #e34f8c; margin-bottom: 0px; padding: 5px 10px; border-top: 2px solid var(--pink); border-radius: 0.2rem;">
                @if (!string.IsNullOrWhiteSpace(selectedWorldName))
                {
                    <span style="color: var(--pink)">@selectedWorldName Top Players</span>
                }
                else
                {
                    <span>Live Activity</span>
                }
            </p>

            <div style="padding: 5px 10px;">

                @if (worlds == null)
                {
                    <em>Loading server list...</em>
                }
                else
                {
                    <select class="btn-sm" style="margin-right: 5px" id="worldSelect" @onchange="OnWorldIdChange">
                        <option value="" class="text-muted" style="font-style:italic">Server</option>
                        @foreach (var world in worlds)
                        {
                            @if (world.Id != 25) //RIP Briggs
                            {
                                <option value="@world.Id.ToString()">@world.Name</option>
                            }
                        }
                    </select>
                }

                @if (players != null)
                {
                    <button class="btn btn-outline-primary btn-sm" @onclick="RefreshTableManual">Refresh</button>
                    <span class="text-muted" style="font-size: 0.8rem; vertical-align: bottom;">Last Refresh: @lastRefreshTime.ToLongTimeString()</span>
                }
                @if (isLoading == true)
                {
                    <span class="text-muted" style="font-size: 0.8rem; vertical-align: bottom;">(loading)</span>
                }


                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <span class="oi oi-warning small" style="font-size: 1rem; color: var(--warning); vertical-align: middle;" title="#@errorCount @errorMessage"></span>
                    @*<em>@errorMessage</em></span>*@
                }

                @*else
                {*@
                    <table class="table-striped table-responsive-sm" style="width: 100%;">
                        <thead style="line-height: 1.1rem;">
                            <tr>
                                <th style="padding: 0.1rem 0.5rem; max-width: 30px;  width: 1rem; border: inherit; font-size: 0.8rem;"></th>
                                <th style="padding-right: 5px; max-width: 55px; width: 1rem; font-size: 0.8rem;"></th> @* outfit alias*@
                                <th style="padding-right: 10px; vertical-align: bottom; font-size: 0.8rem;">Player</th>
                                <th style="padding-right: 10px; max-width: 65px; width: 1rem; vertical-align: bottom; font-size: 0.8rem;">Kills</th>
                                <th style="padding-right: 10px; max-width: 65px; width: 1rem; vertical-align: bottom; font-size: 0.8rem;">Deaths</th>
                                <th style="padding-right: 10px; max-width: 65px; width: 1rem; vertical-align: bottom; font-size: 0.8rem;">KDR</th>
                                <th style="padding-right: 10px; max-width: 65px; width: 1rem; vertical-align: bottom; font-size: 0.8rem;">KPM</th>
                                <th style="padding-right: 10px; max-width: 65px; width: 1rem; vertical-align: bottom; font-size: 0.8rem;">HSR</th>
                                <th style="padding-right: 10px; margin-left: 0.3125rem; max-width: 70px; width: 1.1rem; word-wrap: normal; vertical-align: bottom;">
                                    <span style="font-size: 0.6rem; position: relative; top: 0.5rem;">Session</span>
                                    <span style="font-size: 0.8rem;">KPM</span>
                                </th>
                                <th title="Get"style="padding-right: 10px; max-width: 65px; width: 1rem; vertical-align: bottom; font-size: 0.8rem;">Playtime</th>
                                @*<th style="padding-right: 10px; max-width: 65px; width: 1rem; font-size: 0.8rem;"></th>*@ @* Last-Seen Continent *@
                                @*<th style="padding-right: 10px; max-width: 65px; width: 1rem; font-size: 0.8rem;"></th>*@
                            </tr>
                        </thead>
                        @if (players != null && isChangingWorld != true)
                        {
                            <tbody style="font-size: 0.85rem !important;">
                                @foreach (var player in players)
                                {
                                <tr style="color: @GetFactionColorFromId(player.FactionId);">
                                    @*<td style="padding: 0.1rem 0.5rem 0.1rem 0.25rem; max-width: 30px;  width: 1rem; border: inherit;">*@
                                    @if (player.IsOnline == true)
                                    {
                                        @*<span class="oi oi-bolt small" style="color: #10BF6B !important;"></span>*@
                                        <td style="padding: 0.1rem 0.5rem 0.1rem 0.3125rem; max-width: 30px;  width: 1rem; border: inherit;">
                                            <div title="Online: @player.LatestZoneName" style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px; opacity: 0.65;">@GetZoneDisplayEmoji(player.LatestZoneName)</div>
                                        </td>
                                    }
                                    else
                                    {
                                        <td style="padding: 0.1rem 0.5rem; max-width: 30px;  width: 1rem; border: inherit;">
                                            <span class="oi oi-moon small" style="color: #b7a8d7 !important;"></span>
                                        </td>
                                    }
                                        @*</td>*@
                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 5px;">
                                            @((string.IsNullOrWhiteSpace(player.OutfitAlias)) ? "" : $"[{player.OutfitAlias}]")
                                        </td>

                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">
                                            <button class="btn btn-link" style="font-size: 0.8rem; padding: 0rem !important; color: @GetFactionColorFromId(player.FactionId);" @onclick="@(() => OnSelectPlayer(player.PlayerId))">
                                                @if (string.IsNullOrWhiteSpace(player.PlayerName))
                                                {
                                                    @player.PlayerId
                                                    @*<td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.PlayerId</td>*@
                                                }
                                                else
                                                {
                                                    @*<td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">*@
                                                    <div style="display: inline-block; max-width: 250px; overflow: hidden; text-overflow: ellipsis; vertical-align: bottom;">@player.PlayerName </div>
                                                    <div style="display: inline-block;">
                                                        <sup>
                                                            @(player.BattleRank)
                                                            @if (player.PrestigeLevel != 0)
                                                            {
                                                                <span class="oi oi-star small" style="top: -1px; margin-left: -0.1rem;" aria-hidden="true"></span>
                                                            }
                                                        </sup>
                                                    </div>
                                                    @*</td>*@
                                                }
                                            </button>
                                        </td>

                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.Kills</td>
                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.Deaths</td>
                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.KillDeathRatio</td>
                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.KillsPerMinute</td>
                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@player.HeadshotRatio</td>
                                        <td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">
                                            @((player.SessionKillsPerMinute != null) ? player.SessionKillsPerMinute.ToString() : "-")
                                        </td>
                                        <td title="@GetSessionDisplayTimes(player)" style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">@GetSessionDurationDisplay(player)</td>
                                        @*<td title="@player.LatestZoneName" style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px; opacity: 0.75;">@GetZoneDisplayEmoji(player.LatestZoneName)</td>*@
                                        @*<td style="padding-top: 0.1rem; padding-bottom: 0.1rem; padding-right: 10px;">
                <button class="btn btn-link" style="font-size: 0.8rem; padding: 0rem !important;" @onclick="@(() => OnSelectPlayer(player.PlayerId))">Select</button>
            </td>*@
                                    </tr>
                                }
                            </tbody>
                        }
                    </table>
                @*}*@


                @if (players == null || isChangingWorld == true)
                {
                    <p class="text-muted"><em>Loading...</em></p>
                }
            </div>

            @*<div class="row">
                <div class="col-sm-5">
                    <p>
                        ParsedWorldId: @worldId
                    </p>
                    <p>
                        playerId: @playerId
                    </p>
                </div>
                <div class="col-sm-5">
                    <p>
                        Renders: @renderCount
                    </p>
                    <p>
                        OnInits: @initAsyncCount
                    </p>
                    <p>
                        Param Sets: @paramSetAsyncCount
                    </p>
                </div>
            </div>*@

        </div>

        <div id="player-details" class="col-lg-6" style="border: 2px solid #d4d4ff5a !important; border-radius: 0.2rem; padding: 0px; margin: 0px; background-color: #fcf6ff;">
            <PlayerDetailsPanel playerId="@playerId" OnKillboardPlayerSelected="KillboardPlayerSelected"/> @*worldId="@worldId" OnCharacterIdChanged="KillboardPlayerSelected"/>*@
        </div>
    </div>

    @*<div class="row">
        <div class="col-sm-5">*@
            @*<p></p>
            <p class="h4">Debug Info</p>
            <table class="table-sm table">
                <thead>
                    <tr></tr>
                </thead>
                <tbody>
                    <tr>
                        <td><b>Status:</b></td>
                        <td>@debugMessage</td>
                    </tr>
                    <tr>
                        <td><b>Auto-Refreshes</b></td>
                        <td>@autoRefreshCount</td>
                    </tr>
                    <tr>
                        <td><b>Last Refresh:</b></td>
                        <td>@lastRefreshTime.ToLongTimeString()</td>
                    </tr>
                    <tr>
                        <td><b>Query Start:</b></td>
                        <td>@queryStartTimestamp</td>
                    </tr>
                    <tr>
                        <td><b>Query End:</b></td>
                        <td>@queryEndTimestamp</td>
                    </tr>
                </tbody>
            </table>*@
        @*</div>
    </div>*@
        
</div>


@code {
    [Parameter]
    public int worldId { get; set; } = 17;

    [Parameter]
    public string playerId { get; set; } = "";

    World[] worlds;
    string selectedWorldName = "";

    PlayerHourlyStatsData[] players;
    bool isLoading = false;
    bool isChangingWorld = false;
    DateTime lastRefreshTime;
    string errorMessage = "";

    Timer autoRefreshTimer;
    int autoRefreshCount = 0;
    string refreshSource = "";

    string selectedPlayer = "";

    // DEBUG
    string debugMessage = "";
    string queryStartTimestamp = "";
    string queryEndTimestamp = "";

    int initAsyncCount = 0;
    int paramSetAsyncCount = 0;
    int renderCount = 0;
    int errorCount = 0;


    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("worldId", out var qWorldId))
        {
            worldId = Int32.Parse(qWorldId.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("playerId", out var qPlayerId))
        {
            playerId = qPlayerId.First();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //initAsyncCount += 1;
        //StateHasChanged();


        //debugMessage = "setting up server info";
        //StateHasChanged();
        await SetUpWorlds();
        StateHasChanged();

        if (!string.IsNullOrWhiteSpace(playerId))
        {
            OnSelectPlayer(playerId);
        }

        //debugMessage = "first load";
        //StateHasChanged();
        //await RefreshTable();
        //debugMessage = "initial load complete";
    }

    protected override void OnAfterRender(bool firstRender)
    {
        //renderCount += 1;
    }

    protected override async Task OnParametersSetAsync()
    {
        //paramSetAsyncCount += 1;
        //StateHasChanged();

        await ChangeSelectedWorld(worldId);
        if (!string.IsNullOrWhiteSpace(playerId))
        {
            OnSelectPlayer(playerId);
        }
    }

    async Task SetUpWorlds()
    {
        worlds = await Http.GetJsonAsync<World[]>("api/Worlds");
        if (worlds.Any() == true)
        {
            selectedWorldName = worlds.Where(w => w.Id == worldId).Select(w => w.Name).FirstOrDefault(); //"success1"; //= worlds.FirstOrDefault(w => w.Id == worldId).Name;
            await ChangeSelectedWorld(worldId);
        }
    }

    async Task ChangeSelectedWorld(int newWorldId)
    {
        worldId = newWorldId;

        if (worlds.Any() == true)
        {
            isChangingWorld = true;
            selectedWorldName = worlds.Where(w => w.Id == worldId).Select(w => w.Name).FirstOrDefault(); //worlds.Where(w => w.Id == worldId).FirstOrDefault().Name; // "success2"; // worlds.FirstOrDefault(w => w.Id == worldId).Name;
            if (!string.IsNullOrWhiteSpace(playerId))
            {
                NavigationManager.NavigateTo($"/activity?worldId={worldId}&playerId={playerId}");
            }
            else
            {
                NavigationManager.NavigateTo($"/activity?worldId={worldId}");
            }
            await RefreshTable();
            isChangingWorld = false;
        }

    }

    async Task RefreshTableManual()
    {
        refreshSource = "manual";
        errorMessage = string.Empty;
        StateHasChanged();
        await RefreshTable();
    }

    async Task RefreshTable()
    {
        if (isLoading != true || isChangingWorld == true)
        {
            isLoading = true;
            //debugMessage = "refreshing table";
            if (autoRefreshTimer != null)
            {
                //debugMessage = "stopping timer";
                autoRefreshTimer.Stop();
                StateHasChanged();
            }

            try
            {
                Task<PlayerHourlyStatsData[]> playersTask = Http.GetJsonAsync<PlayerHourlyStatsData[]>($"api/PlayerLeaderboard/{worldId}");
                UpdateQueryDateTimes();
                players = await playersTask;
            }
            catch (Exception ex)
            {
                errorMessage = $"error: {ex}";
                errorCount += 1;
            }

            lastRefreshTime = (DateTime.Now.ToUniversalTime() - TimeSpan.FromHours(5));
            GetNewAutoRefreshTimer();
            isLoading = false;
            //debugMessage = "refresh complete";
            StateHasChanged();
        }
    }

    void GetNewAutoRefreshTimer()
    {
        debugMessage = "getting new timer";
        autoRefreshTimer = new Timer(10000);
        autoRefreshTimer.Elapsed += async (sender, e) => await OnAutoRefreshTimeElapsed();
        autoRefreshTimer.AutoReset = true; //TODO: should this be false?
        autoRefreshTimer.Enabled = true;
    }

    async Task OnAutoRefreshTimeElapsed()
    {
        //debugMessage = "auto-refresh triggered";
        //refreshSource = "auto";
        //StateHasChanged();
        if (isLoading != true)
        {
            try
            {
                debugMessage = string.Empty;
                await RefreshTable();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                debugMessage = $"error: {ex}";
                StateHasChanged();
            }
        }
        //autoRefreshCount += 1;
        //debugMessage = "auto-refresh completed";
        //StateHasChanged();
    }

    string GetUrlFromCharacterId(string characterId)
    {
        return $"https:/www.planetside2.com/players/#!/{characterId}";
    }

    string GetUrlFromCharacterName(string characterName)
    {
        return $"https:/ps2.fisu.pw/player/?name={characterName.ToLower()}";
    }

    void OnSelectPlayer(string characterId)
    {
        selectedPlayer = characterId;
        playerId = selectedPlayer;

        NavigationManager.NavigateTo($"/activity?worldId={worldId}&playerId={playerId}");
    }

    async void OnWorldIdChange(ChangeEventArgs eventArgs)
    {
        var newWorldId = eventArgs.Value.ToString();

        if (!string.IsNullOrWhiteSpace(newWorldId) && newWorldId != "Server")
        {
            worldId = Int32.Parse(newWorldId);
        }

        await ChangeSelectedWorld(worldId);
    }

    public void KillboardPlayerSelected(string characterId)
    {
        OnSelectPlayer(characterId);
    }

    void UpdateQueryDateTimes()
    {
        DateTime nowUtc = DateTime.UtcNow;
        DateTime startTime = nowUtc - TimeSpan.FromHours(1);

        if (nowUtc.Date == startTime.Date)
        {
            queryStartTimestamp = $"{startTime.ToLongTimeString()}";
            queryEndTimestamp = $"{nowUtc.ToLongTimeString()}";
        }
        else
        {
            queryStartTimestamp = $"{startTime.ToShortDateString()} {startTime.ToLongTimeString()}";
            queryEndTimestamp = $"{nowUtc.ToShortDateString()} {nowUtc.ToLongTimeString()}";
        }

        StateHasChanged();
    }

    DateTime GetSessionStartTime(PlayerHourlyStatsData player)
    {
        return (player.LatestLoginTime ?? player.QueryStartTime);
    }

    DateTime GetSessionEndTime(PlayerHourlyStatsData player)
    {
        var sessionEndTime = (player.LatestLogoutTime ?? player.QueryNowUtc); // (playerStats.LatestLogoutTime != null) ? (playerStats.LatestLogoutTime ?? nowUtc) : nowUtc;

        if (sessionEndTime <= GetSessionStartTime(player))
        {
            sessionEndTime = player.QueryNowUtc;
        }

        return sessionEndTime;
    }

    string GetSessionDurationDisplay(PlayerHourlyStatsData player)
    {
        var duration = (GetSessionEndTime(player) - GetSessionStartTime(player));

        var totalMinutes = (int)Math.Round(duration.TotalMinutes, 0);

        int hours = (totalMinutes / 60);

        var remainder = totalMinutes - (hours * 60);

        string hoursDisplay = (hours > 0) ? $"{hours}h" : string.Empty;
        string minutesDisplay = (remainder > 0) ? $"{remainder}m" : string.Empty;
        string space = (hours > 0 && remainder > 0) ? " " : string.Empty;

        return $"{hoursDisplay}{space}{minutesDisplay}";
    }

    string GetSessionDisplayTimes(PlayerHourlyStatsData player)
    {
        var startTime = GetSessionStartTime(player);
        var endTime = GetSessionEndTime(player);

        bool endIsNow = (endTime == player.QueryNowUtc);
        bool sameDates = (startTime.Date == endTime.Date);
        var fiveHours = TimeSpan.FromHours(5);

        if (sameDates == true)
        {
            return endIsNow
                ? $"{(startTime - fiveHours).ToShortTimeString()} - Now"
                : $"{(startTime - fiveHours).ToShortTimeString()} - {(endTime - fiveHours).ToShortTimeString()}";
        }
        else
        {
            return endIsNow
                ? $"{(startTime - fiveHours).ToString("M")} {(startTime - fiveHours).ToShortTimeString()} - Now"
                : $"{(startTime - fiveHours).ToString("M")} {(startTime - fiveHours).ToShortTimeString()} - {(endTime - fiveHours).ToString("M")} {(endTime - fiveHours).ToShortTimeString()}";
        }

    }

    string GetZoneDisplayEmoji(string zoneName)
    {
        switch (zoneName)
        {
            case "Amerish":
                return "🗻"; //\u26f0"; //⛰";

            case "Esamir":
                return "❄️";

            case "Hossin":
                return "🌳";

            case "Indar":
                return "☀️";

            default:
                return "❔";
        }
    }

    string GetFactionColorFromId(int factionId)
    {
        string color = "#2F2F2F";

        switch (factionId)
        {
            //VS
            case 1:
                color = "#652fdc"; // 6A4CE0";
                break;

            //NC
            case 2:
                color = "#1e62fc"; // 1E99FC"; // 5700FE"; //1E99FC";
                break;

            //TR
            case 3:
                color = "#e04c70"; // FF6C70";
                break;
        }

        return color;
    }

    string GetLeaderboardPlayerString(PlayerHourlyStatsData player)
    {
        string name = (!string.IsNullOrWhiteSpace(player.PlayerName)) ? player.PlayerName : player.PlayerId;

        string outfit = (!string.IsNullOrWhiteSpace(player.OutfitAlias)) ? $"[{player.OutfitAlias}]" : "";

        string br = (player.PrestigeLevel == 0) ? $"[BR {player.BattleRank}]" : $"[BR {player.BattleRank}*1]";

        return $"{name} {br}";
    }
}
